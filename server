#!/bin/bash
set -eufxo pipefail
IFS=$'\n\t'


##
# fail if not running as root
##
#[ $(id -u) -ne 0 ] && echo "must be executed with root permissions..." && exit 1


##
# define reusable functions
##

##
# @description request input and optionally apply a fallback/default value
# @param $1 variable name
# @param $2 description
# @param $3 default value
##
grab_or_fallback()
{
    export ${1}=""
    read -p "${3:-input}: " ${1}
    [ -z "$(eval echo \$$1)" ] && export ${1}="${2:-}"
    return 0
}

##
# @description request secret input (eg. passwords) and optionally apply a fallback/default value
# @param $1 variable name
# @param $2 description
# @param $3 default value
##
grab_secret_or_fallback()
{
    export ${1}=""
    read -p "${3:-input}: " -s ${1}
    echo "" # move to nextline
    [ -z "$(eval echo \$$1)" ] && export ${1}="${2:-}"
    return 0
}

##
# @description ask for yes/no response via y/n
# @param $1 variable to handle input
# @param $2 description
##
grab_yes_no()
{
    export ${1}=""
    until [[ "$(eval echo \$$1)" == *"y"* ]] || [[ "$(eval echo \$$1)" == *"n"* ]]
    do
        read -p "${2:-} (yn)? " ${1}
    done
    return 0
}


##
# gather user defined configuration
##

# user & key information
grab_or_fallback "username" "root" "enter your username"
grab_secret_or_fallback "password" "" "enter your user password"
grab_yes_no "generate_ssh_key" "create an ssh key"
[ "$generate_ssh_key" = "y" ] && [ ! -f "/home/$username/.ssh/id_rsa" ] && grab_secret_or_fallback "ssh_key_password" "$password" "alternative password for ssh key (defaults to user password)"

# github configuration
grab_or_fallback "github_username" "" "enter your github username"
[ -n "$github_username" ] && grab_secret_or_fallback "github_password" "" "enter your github password"
[ -n "$github_password" ] && grab_yes_no "github_ssh_key" "upload ssh key to github"

# various settings
grab_or_fallback "ssh_port" "22" "enter your preferred ssh port"
grab_or_fallback "ssh_port" "US/Eastern" "enter your preferred timezone (eg. US/Eastern)"
grab_or_fallback "system_hostname" "" "enter a system hostname"
grab_or_fallback "system_domainname" "" "enter a system domain name"

# additional customization packages
grab_yes_no "install_dotfiles" "install dot files"
grab_yes_no "install_custom_fonts" "install custom fonts"

# conditional services
grab_yes_no "install_wireless_drivers" "install wireless & bluetooth drivers"
grab_yes_no "install_processing_tools" "install graphics, audio, and video processing utilities"
grab_yes_no "install_weechat" "install weechat irc client"
grab_yes_no "install_wireless_drivers" "install transmission bittorrent server"
grab_yes_no "install_mongodb" "install mongodb"
[ "$install_mongodb" = "y" ] && grab_yes_no "public_mongodb" "make mongodb public"
#grab_yes_no "install_postgresql" "install postgres"
# [ "$install_postgresql" = "y" ] && grab_yes_no "public_postgresql" "make postgres public"
grab_yes_no "install_mail_server" "would you like to install the msmtp mail server"
grab_or_fallback "mail_server_username" "$username" "mail server username"
grab_or_fallback "mail_server_password" "$password" "mail server password"


##
# set dependent default variables
##
export cronfile="/var/spool/cron/crontabs/${username}"
export github_https="https://github.com/cdelorme/system-setup"


##
# @todo(casey) begin installation...
##


echo "done!"
