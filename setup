#!/bin/bash

# query for options
if [ $(uname) = "Linux" ]
then

    ##
    # fail if not running as root
    ##
    [ $(id -u) -ne 0 ] && echo "must be executed with root permissions..." && exit 1


    ##
    # ask platform specific questions
    ##

    while [ "$service" != "template" ] && [ "$service" != "web" ] && [ "$service" != "dev" ]
    do
        echo -n "what type of system is this (template|web|dev)? "
        read service
    done

    while [ -z "$username" ]
    do
        echo -n "enter a username for your new system user: "
        read username
    done

    while [ -z "$password" ]
    do
        echo -n "enter a password for your new system user: "
        read password
    done

    echo -n "enter an ssh port (default: 22): "
    read ssh_port

    echo -n "enter a hostname (default: $service): "
    read system_hostname

    echo -n "enter a domain name (optional): "
    read domainname

    echo -n "enter a timezone path (default: US/Eastern): "
    read timezone

    while [ "$jis" != "n" ] && [ "$jis" != "y" ]
    do
        echo -n "enable jis (y|n): "
        read jis
    done

    while [ "$create_ssh" != "n" ] && [ "$create_ssh" != "y" ]
    do
        echo -n "would you like to generate an ssh key (will replace existing ~/.ssh/id_rsa, y|n)? "
        read create_ssh
    done

    if [ "$create_ssh" = "y" ]
    then
        while [ "$send_ssh_to_github" != "n" ] && [ "$send_ssh_to_github" != "y" ]
        do
            echo -n "do you want your new ssh key to be sent to github (y|n)? "
            read send_ssh_to_github
        done
    fi

    ##
    # request service specific settings
    ##
    if [ "$service" = "web" ]
    then
        echo "web questions"
    elif [ "$service" = "dev" ]
    then
        echo "dev questions"
    fi

    ##
    # set platform defaults
    ##
    [ -z "$ssh_port" ] && ssh_port=22
    [ -z "$timezone" ] && timezone="US/Eastern"
    [ -z "$system_hostname" ] && system_hostname=$service
    cronfile="/var/spool/cron/crontabs/${username}"

elif [ $(uname) = "Darwin" ]
then
    service="osx"


    ##
    # ask platform specific questions
    ##

    while [ "$jis" != "n" ] && [ "$jis" != "y" ]
    do
        echo -n "enable jis (y|n): "
        read jis
    done

    while [ "$create_ssh" != "n" ] && [ "$create_ssh" != "y" ]
    do
        echo "would you like to generate an ssh key (y|n)?"
        read create_ssh
    done


    ##
    # set platform specific settings
    ##

elif [[ $(name) = MINGW* ]]
then
    service="windows"


    ##
    # ask platform specific questions
    ##

    while [ "$create_ssh" != "n" ] && [ "$create_ssh" != "y" ]
    do
        echo "would you like to generate an ssh key (y|n)?"
        read create_ssh
    done


    ##
    # set platform specific settings
    ##
    cron_file=~/.crontab

else
    echo "no scripts for this platform..."
    exit 1
fi

##
# ask platform agnostic questions
##
while [ "$dot_files" != "n" ] && [ "$dot_files" != "y" ]
do
    echo -n "install dot-files (y|n)? "
    read dot_files
done

echo -n "enter a github username for the configuration (optional): "
read github_username

echo -n "enter a github password for the configuration (optional): "
read github_password


##
# set default values for scripted execution
##

remote_source="https://raw.githubusercontent.com/cdelorme/system-setup/develop/"
[ -z "$service" ] && service="template"
[ "$dot_files" = "y" ] && dot_files="https://raw.githubusercontent.com/cdelorme/dot-files/master/install"


##
# verify available remote commands
##

if which curl &> /dev/null
then
    dl_cmd="curl -Lo"
    source_cmd="curl -s"
elif which wget &> /dev/null
then
    dl_cmd="wget -O"
    source_cmd="wget --no-check-certificate -qO-"
fi


##
# load service script
##

echo "loading $service script..."
[ -f "scripts/${service}.sh" ] && . "scripts/${service}.sh" || . <($source_cmd "${remote_source}scripts/${service}.sh")
echo "finished setup..."