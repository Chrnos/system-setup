#!/bin/bash
# root permissions expected

# -----------------------------------------------------------------------------
##
# set configuration data
##

# set hostname & domain name
config_system_hostname="dev"
config_system_domainname="domain.dev"

# [install my dot-files](https://github.com/cdelorme/dot-files)
config_install_dot_files=true

# username & password
config_system_username="cdelorme"
config_system_password="pw"

# github username, password, and whether to generate and upload a new ssl to git during dot-file execution
config_github_username="cdelorme"
config_github_password=""
config_create_ssl=false

# irc configuration
config_irc_username="${config_system_username}"
config_irc_password="pw"


##
# linux only
##

# install to /etc/skel
config_skel_dot_files=true

# adjust default ssh port
config_ssh_port=9004

# set timezone (default is EST)
config_system_timezone=/usr/share/zoneinfo/US/Eastern

# monit web access
config_monit_web=true
config_monit_web_port=9005

# enable japanese UTF8 support
config_jis_support=true

# transmission config settings
config_bt_max_down=3000
config_bt_max_up=80
config_bt_watch_path="/tmp"
config_bt_incomplete_path="/tmp"
config_bt_complete_path="/tmp"
config_bt_web_accessible=true
config_bt_web_port=9010


##
# end of config data, do not modify contents below
##
# -----------------------------------------------------------------------------

##
# universal operations
##

configure_hosts() {

    # set hostname & domainname
    if [ $OSX ]
    then
        scutil --set HostName "${config_system_hostname}"
        domainname "${config_system_domainname}"
    else
        echo "${config_system_hostname}" > /etc/hostname
        hostname -F /etc/hostname
        sed -i "s/127.0.1.1.*/127.0.1.1 ${config_system_hostname}.${config_system_domainname} ${config_system_hostname}/" /etc/hosts
    fi

}

user_dot_files() {
    if [ $config_install_dot_files ]
    then
        if ! [ -f /tmp/install ]
        then
            wget -O /tmp/install "https://raw.githubusercontent.com/cdelorme/dot-files/master/install"
            chmod +x /tmp/install
        fi

        # create a copy of the install script in the users home folder to resolve execution conflicts
        su $config_system_username -s /bin/bash -c "cp /tmp/install ~/install"

        # run dot-files as user
        df_cmd=" ~/install -a"
        if [ -n "$config_github_username" ]
        then
            df_cmd="$df_cmd -u ${config_github_username}"
            if [ -n "$config_github_password" ]
            then
                df_cmd="$df_cmd -p \"${config_github_password}\""
                if [ -n "$config_system_password" ] && [ "$config_create_ssl" ]
                then
                    df_cmd="$df_cmd --ssl-password=\"${config_system_password}\""
                fi
            fi
        fi

        # install & cleanup
        su $config_system_username -s /bin/bash -c "${df_cmd}"
        su $config_system_username -s /bin/bash -c "rm -rf ~/install.log ~/downloads ~/install"
        rm /tmp/install
    fi
}


##
# osx operations
##

install_osx_packages() {
    echo "incomplete: install_osx_packages"
}

configure_osx_services() {
    echo "incomplete: configure_osx_services"
}


##
# linux operations
##

install_linux_packages() {

    # add template packages to list
    packages="firmware-linux firmware-linux-free firmware-linux-nonfree usbutils uuid-runtime debconf-utils bzip2 lzop p7zip-full zip unzip unrar xz-utils unace rzip unalz zoo arj netselect-apt ssh curl ntp rsync whois vim git git-flow mercurial debhelper libncurses5-dev kernel-package build-essential fakeroot e2fsprogs parted sshfs fuse-utils gvfs-fuse exfat-fuse exfat-utils fusesmb os-prober sudo bash-completion command-not-found tmux screen bc less keychain pastebinit anacron miscfiles monit markdown avahi-utils avahi-daemon libnss-mdns wireless-tools htop linux-headers-3.2.0-4-all lm-sensors resolvconf watchdog g++"

    # install net-select to improve mirror speeds
    if ! which netselect-apt &> /dev/null
    then
        aptitude install -ryq netselect-apt
        netselect-apt -sn
    fi

    # remove tiny-vim
    if which vi &> /dev/null && ! which vim
    then
        dpkg -r vim-common vim-tiny
    fi

    # pre-configure comm packages
    if [ "$1" = "comm" ] || [ "$1" = "dev" ]  || [ "$1" = "all" ]
    then

        # settings for mdadm package
        echo "mdadm   mdadm/autostart boolean true" | debconf-set-selections
        echo "mdadm   mdadm/autocheck boolean true" | debconf-set-selections
        echo "mdadm   mdadm/mail_to   string  root" | debconf-set-selections
        echo "mdadm   mdadm/initrdstart   string  all" | debconf-set-selections
        echo "mdadm   mdadm/initrdstart_notinconf boolean false" | debconf-set-selections
        echo "mdadm   mdadm/start_daemon  boolean true" | debconf-set-selections

        # add comm packages to list
        packages="$packages samba samba-tools smbclient mdadm weechat-curses transmission-daemon"
    fi

    # preconfigure gui packages
    if [ "$1" = "gui" ] || [ "$1" = "dev" ] || [ "$1" = "all" ]
    then
        if ! [ -f /etc/apt/sources.list.d/google.list ]
        then

            # add google chrome to aptitude sources
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
            echo "# Google Chrome repo http://www.google.com/linuxrepositories/" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/talkplugin/deb/ stable main" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/earth/deb/ stable main" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/musicmanager/deb/ stable main" >> /etc/apt/sources.list.d/google.list
        fi

        # add gui packages to list
        packages="$packages desktop-base openbox obconf obmenu menu tint2 conky-all chromium zenity zenity-common pcmanfm alsa-base alsa-utils pulseaudio volumeicon-alsa feh hsetroot rxvt-unicode xorg xserver-xorg-video-all x11-xserver-utils xinit xinput xtightvncviewer suckless-tools gmrun arandr clipit xsel gksu catfish fbxkb openbox-themes dmz-cursor-theme gnome-icon-theme gnome-icon-theme-extras lxappearance gparted vlc gtk-recordmydesktop chromium transmission transmission-cli openshot flashplugin-nonfree lame ffmpeg shared-mime-info fontconfig fontconfig-config fonts-droid fonts-droid fonts-freefont-ttf fonts-liberation fonts-takao ttf-mscorefonts-installer gimp gimp-plugin-registry evince bpython libX11-dev libmcrypt-dev python-dev python3-dev libperl-dev openjdk-7-jre xdg-user-dirs libconfig-dev libx11-dev libxcomposite-dev libxdamage-dev libxfixes-dev libxext-dev libxrender-dev libxrandr-dev libXinerama-dev x11-utils libpcre3-dev libdrm-dev libdbus-1-dev libgl1-mesa-dev asciidoc bluez bluez-utils bluez-tools google-chrome-stable google-chrome-unstable google-talkplugin"
    fi

    # prep & install all packages (reinstall adds any recommended to our base system packages)
    aptitude clean
    aptitude update
    aptitude upgrade -yq
    aptitude reinstall -ryq $packages
    aptitude install -ryq $packages

    # manual installs
    if [ "$1" = "gui" ] || [ "$1" = "dev" ] || [ "$1" = "all" ]
    then

        # attempt compton installation
        git clone https://github.com/chjj/compton.git /tmp/compton
        (cd /tmp/compton && make && make install)
        rm -rf /tmp/compton

        # attempt youtube-dl installation
        git clone https://github.com/rg3/youtube-dl /tmp/youtube-dl
        (cd /tmp/youtube-dl && python setup.py install)
        rm -rf /tmp/youtube-dl

        # cleanup chrome sources
        rm /etc/apt/sources.list.d/google.list /etc/apt/sources.list.d/google-chrome-unstable.list
    fi

}

configure_linux_services() {

    # install dot-files
    if [ $config_install_dot_files ]
    then
        if ! [ -f /tmp/install ]
        then
            wget -O /tmp/install "https://raw.githubusercontent.com/cdelorme/dot-files/master/install"
            chmod +x /tmp/install
        fi

        # only linux should have dot-files as root
        if [ $LINUX ]
        then
            if [ $config_skel_dot_files ]
            then
                /tmp/install -a -s
            else
                /tmp/install -a
            fi
        fi

        # cleanup
        rm -rf /tmp/downloads /tmp/install.log /tmp/install
    fi

    # update our command-not-found cache
    if which update-command-not-found &> /dev/null
    then
        update-command-not-found
    fi

    if which sensors-detect &> /dev/null
    then
        echo "configuring lm-sensors..."
        yes "" | sensors-detect
    fi

    # ensure watchdog is enabled
    update-rc.d watchdog defaults

    # enable lvm trim support
    sed -i 's/issue_discards = 0/issue_discards = 1/' /etc/lvm/lvm.conf

    # set modern umask to 002 for default matching group privileges
    sed -i 's/UMASK\s*022/UMASK        002/' /etc/login.defs
    if [ $(grep -c "umask=002" /etc/pam.d/common-session) -eq 0 ]
    then
        echo "session optional pam_umask.so umask=002" >> /etc/pam.d/common-session
    fi

    # setup timezone
    rm -rf /etc/localtime && ln -sf $config_system_timezone /etc/localtime

    # secure ssh
    sed -i "s/Port 22/Port ${config_ssh_port}/" /etc/ssh/sshd_config
    sed -i "s/^#\?PasswordAuthentication\s*[yn].*/PasswordAuthentication no/" /etc/ssh/sshd_config
    sed -i "s/^#\?PermitRootLogin.*[yn].*/PermitRootLogin no/" /etc/ssh/sshd_config

    # fix potential permission problems with logs
    chown -R root:adm /var/log/*

    # ensure vim is set as default editor
    update-alternatives --set editor /usr/bin/vim.basic

    # setup customized samba settings
    if which smbd &> /dev/null
    then
        echo "#======================= Global Settings =======================" > /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "[global]" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Naming" >> /etc/samba/smb.conf
        echo "    workgroup = WORKGROUP" >> /etc/samba/smb.conf
        echo "    server string = %h server" >> /etc/samba/smb.conf
        echo "    netbios name = comm" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Eliminate Printing" >> /etc/samba/smb.conf
        echo "    load printers = no" >> /etc/samba/smb.conf
        echo "    printing = bsd" >> /etc/samba/smb.conf
        echo "    printcap name = /dev/null" >> /etc/samba/smb.conf
        echo "    disable spoolss = yes" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Security" >> /etc/samba/smb.conf
        echo "    invalid users = nobody guest root" >> /etc/samba/smb.conf
        echo "    encrypt passwords = true" >> /etc/samba/smb.conf
        echo "    passdb backend = tdbsam" >> /etc/samba/smb.conf
        echo "    obey pam restrictions = yes" >> /etc/samba/smb.conf
        echo "    unix password sync = yes" >> /etc/samba/smb.conf
        echo "    passwd program = /usr/bin/passwd %u" >> /etc/samba/smb.conf
        echo "    passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* ." >> /etc/samba/smb.conf
        echo "    pam password change = yes" >> /etc/samba/smb.conf
        echo "    panic action = /usr/share/samba/panic-action %d" >> /etc/samba/smb.conf
        echo "    syslog = 6" >> /etc/samba/smb.conf
        echo "    log file = /var/log/samba/log.%m" >> /etc/samba/smb.conf
        echo "    max log size = 1000" >> /etc/samba/smb.conf
        echo "    disable netbios = yes" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Optimizations" >> /etc/samba/smb.conf
        echo "    bind interfaces only = yes" >> /etc/samba/smb.conf
        echo "    interfaces = eth0" >> /etc/samba/smb.conf
        echo "    socket options = TCP_NODELAY IPTOS_LOWDELAY SO_RCVBUF=65536 SO_SNDBUF=65536 SO_KEEPALIVE" >> /etc/samba/smb.conf
        echo "    deadtime = 15" >> /etc/samba/smb.conf
        echo "    getwd cache = yes" >> /etc/samba/smb.conf
        echo "    dns proxy = no" >> /etc/samba/smb.conf
        echo "    max connections = 30" >> /etc/samba/smb.conf
        echo "    use sendfile = yes" >> /etc/samba/smb.conf
        echo "    write cache size = 16384" >> /etc/samba/smb.conf
        echo "    aio write size = 524288" >> /etc/samba/smb.conf
        echo "    aio read size = 524288" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "#======================= Share Definitions =======================" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
    fi

    # configure transmission
    if which transmission-daemon &> /dev/null
    then

        # temporarily turn off daemon to update settings
        service transmission-daemon stop

        # update all matched
        sed -i 's/"encryption":.*/"encryption": 2,/' /etc/transmission-daemon/settings.json
        sed -i 's/"idle-seeding-limit":.*/"idle-seeding-limit": 60,/' /etc/transmission-daemon/settings.json
        sed -i 's/"idle-seeding-limit-enabled":.*/"idle-seeding-limit-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i 's/"ratio-limit-enabled":.*/"ratio-limit-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i 's/"umask":.*/"umask": 2,/' /etc/transmission-daemon/settings.json
        sed -i 's/"speed-limit-down-enabled":.*/"speed-limit-down-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i 's/"speed-limit-up-enabled":.*/"speed-limit-up-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i "s/\"speed-limit-down\":.*/\"speed-limit-down\": ${config_bt_max_down},/" /etc/transmission-daemon/settings.json
        sed -i "s/\"speed-limit-up\":.*/\"speed-limit-up\": ${config_bt_max_up},/" /etc/transmission-daemon/settings.json
        sed -i 's/"incomplete-dir-enabled":.*/"incomplete-dir-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i "s;\"incomplete-dir\":.*;\"incomplete-dir\": \"${config_bt_incomplete_path}\",;" /etc/transmission-daemon/settings.json
        sed -i "s;\"download-dir\":.*;\"download-dir\": \"${config_bt_complete_path}\",;" /etc/transmission-daemon/settings.json

        # make web accessible
        if [ $config_bt_web_accessible ]
        then
            sed -i "s/\"rpc-port\":.*/\"rpc-port\": ${config_bt_web_port},/" /etc/transmission-daemon/settings.json
            sed -i 's;"rpc-url":.*;"rpc-url": "/bt/",;' /etc/transmission-daemon/settings.json
            sed -i "s;\"rpc-username\":.*;\"rpc-username\": \"${config_system_username}\",;" /etc/transmission-daemon/settings.json
            sed -i "s;\"rpc-password\":.*;\"rpc-password\": \"${config_system_password}\",;" /etc/transmission-daemon/settings.json
            sed -i 's;"rpc-whitelist":.*;"rpc-whitelist": "*",;' /etc/transmission-daemon/settings.json
        fi

        # conditionally replace or append
        if [ $(grep -c "watch-dir-enabled" /etc/transmission-daemon/settings.json) -eq 1 ]
        then
            sed -i 's/"watch-dir-enabled":.*/"watch-dir-enabled": true,/' /etc/transmission-daemon/settings.json
        else
            sed -i 's/"umask":.*/"umask": 2,\n    "watch-dir-enabled": true,/' /etc/transmission-daemon/settings.json
        fi
        if [ $(grep -c "watch-dir" /etc/transmission-daemon/settings.json) -eq 1 ]
        then
            sed -i "s;\"watch-dir\":.*;\"watch-dir\": \"${config_torrent_watch_path}\",;" /etc/transmission-daemon/settings.json
        else
            sed -i "s;\"umask\":.*;\"umask\": 2,\n    \"watch-dir\": \"${config_torrent_watch_path}\",;" /etc/transmission-daemon/settings.json
        fi
        if [ $(grep -c "lazy-bitfield-enabled" /etc/transmission-daemon/settings.json) -eq 1 ]
        then
            sed -i 's/"lazy-bitfield-enabled":.*/"lazy-bitfield-enabled": true,/' /etc/transmission-daemon/settings.json
        else
            sed -i 's/"umask":.*/"umask": 2,\n    "lazy-bitfield-enabled": true,/' /etc/transmission-daemon/settings.json
        fi

        # restart daemon
        service transmission-daemon start
    fi

    # update default web browser, session & window managers
    if which google-chrome-stable &> /dev/null
    then
        update-alternatives --set x-www-browser /usr/bin/google-chrome-stable
    fi
    if which openbox-session &> /dev/null
    then
        update-alternatives --set x-session-manager /usr/bin/openbox-session
    fi
    if which openbox &> /dev/null
    then
        update-alternatives --set x-window-manager /usr/bin/openbox
    fi
    if which urxvt &> /dev/null
    then
        update-alternatives --set x-terminal-emulator /usr/bin/urxvt
    fi

    # add locale & download custom fonts
    if [ $config_jis_support ]
    then

        # only enable once
        if [ $(grep -c "ja_JP.UTF-8" /etc/locale.gen) -eq 1 ]
        then
            sed -i "s/# ja_JP\.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/" /etc/locale.gen
        fi

        # rebuild system locale files
        locale-gen

        # install custom fonts globally
        mkdir -p /usr/share/fonts/ttf/jis
        curl -o "/usr/share/fonts/ttf/jis/ForMateKonaVe.ttf" "https://raw.githubusercontent.com/cdelorme/system-setup/master/data/fonts/ForMateKonaVe.ttf"
        curl -o "/usr/share/fonts/ttf/jis/epkyouka.ttf" "https://raw.githubusercontent.com/cdelorme/system-setup/master/data/fonts/epkyouka.ttf"

        fc-cache -fr
    fi
}

create_crontabs() {

    if ! [ -f /etc/cron.weekly/disk_maintenance ]
    then
        echo "#!/bin/bash" > /etc/cron.weekly/disk_maintenance
        echo "# search and destroy mac/windows garbage files" >> /etc/cron.weekly/disk_maintenance
        echo "find -iname \"thumbs.db\" -exec rm -rf {} \\;" >> /etc/cron.weekly/disk_maintenance
        echo "find -iname \".ds_store\" -exec rm -rf {} \\;" >> /etc/cron.weekly/disk_maintenance
        echo "# reduced io stress with weekly fstrim" >> /etc/cron.weekly/disk_maintenance
        echo "for DEVICE in \$(mount | grep ext4 | grep -v mapper | awk '{print \$1}')" >> /etc/cron.weekly/disk_maintenance
        echo "do" >> /etc/cron.weekly/disk_maintenance
        echo "    fstrim \"\${DEVICE}\"" >> /etc/cron.weekly/disk_maintenance
        echo "done" >> /etc/cron.weekly/disk_maintenance
        echo "# defragment ext4 devices" >> /etc/cron.weekly/disk_maintenance
        echo "for DEVICE in \$(mount | grep ext4 | awk '{print \$1}')" >> /etc/cron.weekly/disk_maintenance
        echo "do" >> /etc/cron.weekly/disk_maintenance
        echo "    e4defrag \"\${DEVICE}\"" >> /etc/cron.weekly/disk_maintenance
        echo "done" >> /etc/cron.weekly/disk_maintenance
        chmod +x /etc/cron.weekly/disk_maintenance
    fi

    if ! [ -f /etc/cron.daily/system_updates ]
    then
        echo "#!/bin/sh" > /etc/cron.daily/system_updates
        echo "# update mirrors & packages daily" >> /etc/cron.daily/system_updates
        echo "netselect-apt -sn" >> /etc/cron.daily/system_updates
        echo "aptitude clean" >> /etc/cron.daily/system_updates
        echo "aptitude update" >> /etc/cron.daily/system_updates
        echo "aptitude upgrade -yq" >> /etc/cron.daily/system_updates
        echo "update-command-not-found" >> /etc/cron.daily/system_updates
        chmod +x /etc/cron.daily/system_updates
    fi

}

configure_monit() {

    if ! [ -f /etc/monit/monitrc.d/system ]
    then
        echo "check system localhost" > /etc/monit/monitrc.d/system
        echo "    if loadavg (1min) > 10 then alert" >> /etc/monit/monitrc.d/system
        echo "    if loadavg (5min) > 8 then alert" >> /etc/monit/monitrc.d/system
        echo "    if memory usage > 80% then alert" >> /etc/monit/monitrc.d/system
        echo "    if cpu usage (user) > 70% for 2 cycles then alert" >> /etc/monit/monitrc.d/system
        echo "    if cpu usage (system) > 50% for 2 cycles then alert" >> /etc/monit/monitrc.d/system
        echo "    if cpu usage (wait) > 50% for 2 cycles then alert" >> /etc/monit/monitrc.d/system
        echo "    if loadavg (1min) > 20 for 3 cycles then exec \"/sbin/reboot\"" >> /etc/monit/monitrc.d/system
        echo "    if loadavg (5min) > 15 for 5 cycles then exec \"/sbin/reboot\"" >> /etc/monit/monitrc.d/system
        echo "    if memory usage > 97% for 3 cycles then exec \"/sbin/reboot\"" >> /etc/monit/monitrc.d/system
        ln -sf /etc/monit/monitrc.d/system /etc/monit/conf.d/system
    fi

    if ! [ -f /etc/monit/monitrc.d/ssh ] && which sshd &> /dev/null
    then
        echo "check process sshd with pidfile /var/run/sshd.pid" > /etc/monit/monitrc.d/ssh
        echo "    start program = \"/etc/init.d/ssh start\"" >> /etc/monit/monitrc.d/ssh
        echo "    stop program  = \"/etc/init.d/ssh stop\"" >> /etc/monit/monitrc.d/ssh
        echo "    if cpu > 80% for 5 cycles then restart" >> /etc/monit/monitrc.d/ssh
        echo "    if totalmem > 200.00 MB for 5 cycles then restart" >> /etc/monit/monitrc.d/ssh
        echo "    if 3 restarts within 8 cycles then timeout" >> /etc/monit/monitrc.d/ssh
        ln -sf /etc/monit/monitrc.d/ssh /etc/monit/conf.d/ssh
    fi

    if [ $config_monit_web ] && ! [ -f /etc/monit/monitrc.d/web ]
    then
        echo "# create localhost-only web server" > /etc/monit/monitrc.d/web
        echo "set httpd port ${config_monit_web_port}" >> /etc/monit/monitrc.d/web
        echo "    allow 127.0.0.1" >> /etc/monit/monitrc.d/web
        ln -sf /etc/monit/monitrc.d/web /etc/monit/conf.d/web
    fi

    if ! [ -f /etc/monit/monitrc.d/samba ] && which smbd &> /dev/null
    then
        echo "check process samba match smbd" >> /etc/monit/monitrc.d/samba
        echo "    start program = \"/etc/init.d/samba start\"" >> /etc/monit/monitrc.d/samba
        echo "    stop program = \"/etc/init.d/samba stop\"" >> /etc/monit/monitrc.d/samba
        echo "    group sambashare" >> /etc/monit/monitrc.d/samba
        echo "    if cpu usage > 80% for 15 cycles then restart" >> /etc/monit/monitrc.d/samba
        echo "    if mem usage > 80% for 30 cycles then restart" >> /etc/monit/monitrc.d/samba
        ln -s  /etc/monit/monitrc.d/samba  /etc/monit/conf.d/samba
    fi

    if ! [ -f /etc/monit/monitrc.d/transmission-daemon ] && which transmission-daemon &> /dev/null
    then
        echo "check process transmission-daemon match transmission-daemon" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    start program = \"/etc/init.d/transmission-daemon start\"" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    stop program = \"/etc/init.d/transmission-daemon stop\"" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    if cpu usage > 80% for 15 cycles then restart" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    if mem usage > 80% for 30 cycles then restart" >> /etc/monit/monitrc.d/transmission-daemon
        ln -s  /etc/monit/monitrc.d/transmission-daemon  /etc/monit/conf.d/transmission-daemon
    fi

    # test && reboot monit
    monit -t && service monit restart

}

firewall_rules() {

    # create iptables path
    mkdir -p /etc/iptables/

    # backup current rules (as a restore alternative to flushing)
    iptables-save > /etc/iptables/empty.rules

    # open rules file
    echo "*filter" > /etc/iptables/iptables.rules

    echo "# accept established connections" >> /etc/iptables/iptables.rules
    echo "-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT" >> /etc/iptables/iptables.rules

    echo "# accept local traffic" >> /etc/iptables/iptables.rules
    echo "-A INPUT -i lo -j ACCEPT" >> /etc/iptables/iptables.rules
    echo "-A OUTPUT -o lo -j ACCEPT" >> /etc/iptables/iptables.rules

    echo "# accept ping" >> /etc/iptables/iptables.rules
    echo "-A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT" >> /etc/iptables/iptables.rules

    ##
    # conditionally apply more rules
    ##

    # samba configuration
    if which smbd &> /dev/null
    then
        echo "# samba traffic" >> /etc/iptables/iptables.rules
        echo "-A INPUT -p udp -m multiport --dports 137,138 -j ACCEPT" >> /etc/iptables/iptables.rules
        echo "-A INPUT -p tcp -m multiport --dports 139,445 -j ACCEPT" >> /etc/iptables/iptables.rules
    fi

    # transmission configuration
    if which transmission-daemon &> /dev/null
    then
        echo "# tranmission peer traffic (default port 51413)" >> /etc/iptables/iptables.rules
        echo "-A INPUT -p udp -m udp --dport 51413 -j ACCEPT" >> /etc/iptables/iptables.rules

        # web accessibility
        if [ $config_bt_web_accessible ]
        then
            echo "# transmission web interface" >> /etc/iptables/iptables.rules
            echo "-A INPUT -p tcp -m tcp --dport ${config_bt_web_port} -j ACCEPT" >> /etc/iptables/iptables.rules
        fi
    fi

    echo "# accept ssh with rate limiting" >> /etc/iptables/iptables.rules
    echo "-N LOGREJECTSSH" >> /etc/iptables/iptables.rules
    echo "-A LOGREJECTSSH -j LOG --log-prefix \"iptables deny: \" --log-level 7" >> /etc/iptables/iptables.rules
    echo "-A LOGREJECTSSH -j REJECT" >> /etc/iptables/iptables.rules
    echo "-A INPUT -p tcp -m tcp --dport ssh -m conntrack --ctstate NEW -m recent --set --name SSH --rsource" >> /etc/iptables/iptables.rules
    echo "-A INPUT -p tcp -m tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 4 --name SSH --rttl --rsource -j LOGREJECTSSH" >> /etc/iptables/iptables.rules
    echo "-A INPUT -p tcp -m tcp --dport ssh -j ACCEPT" >> /etc/iptables/iptables.rules

    echo "# drop invalid" >> /etc/iptables/iptables.rules
    echo "-A INPUT -m conntrack --ctstate INVALID -j DROP" >> /etc/iptables/iptables.rules

    echo "# reject all others (linux compliant blacklist)" >> /etc/iptables/iptables.rules
    echo "-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable" >> /etc/iptables/iptables.rules
    echo "-A INPUT -p tcp -j REJECT --reject-with tcp-rst" >> /etc/iptables/iptables.rules
    echo "-A INPUT -j REJECT --reject-with icmp-proto-unreachable" >> /etc/iptables/iptables.rules

    echo "# drop forwards" >> /etc/iptables/iptables.rules
    echo "-A FORWARD -j DROP" >> /etc/iptables/iptables.rules

    echo "COMMIT" >> /etc/iptables/iptables.rules

    # create iptables loader
    echo "#!/bin/bash" > /etc/network/if-up.d/iptables
    echo "iptables-restore < /etc/iptables/iptables.rules" >> /etc/network/if-up.d/iptables
    chmod +x /etc/network/if-up.d/iptables

}

create_user() {

    # linux-only
    if [ $LINUX ]
    then

        # create user
        if ! id ${config_system_username} &> /dev/null
        then
            useradd -m -s /bin/bash -p $(mkpasswd -m md5 "${config_system_password}") ${config_system_username}
        fi

        # apply groups to user conditionally
        usermod -aG sudo,adm ${config_system_username}

        if which smbd &> /dev/null
        then
            usermod -aG sambashare ${config_system_username}
        fi
        if which openbox &> /dev/null
        then
            usermod -aG video,audio,bluetooth,netdev,fuse,scanner,pulse-access ${config_system_username}
        fi
    fi

}

configure_user_services() {

    # acquire and store user_home_dir for operations
    user_home_dir=$(cat /etc/passwd | grep ${config_system_username} | awk -F ':' '{print $6}')

    # randomized wallpaper loop
    if which feh &> /dev/null
    then
        echo '(while true; do feh -q --no-fehbg --bg-fill $(find "${HOME}/.wallpaper" -type f | sort -R | tail -1) && sleep 300; done;) &' > "${user_home_dir}/.fehbg"
    fi

    # configure urxvt
    if which urxvt &> /dev/null
    then

        # urxvt config
        echo 'Xft.dpi:                    96' > "${user_home_dir}/.Xdefaults"
        echo 'Xft.antialias:              true' >> "${user_home_dir}/.Xdefaults"
        echo 'Xft.rgba:                   rgb' >> "${user_home_dir}/.Xdefaults"
        echo 'Xft.hinting:                true' >> "${user_home_dir}/.Xdefaults"
        echo 'Xft.hintstyle:              hintslight' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.depth:                32' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.geometry:             80x24' >> "${user_home_dir}/.Xdefaults"
        if which compton &> /dev/null || which xcompmgr &> /dev/null
        then
            echo 'URxvt*background:           [30]#001E27' >> "${user_home_dir}/.Xdefaults"
        else
            echo 'URxvt*background:           #001E27' >> "${user_home_dir}/.Xdefaults"
            echo 'URxvt.transparent:          true' >> "${user_home_dir}/.Xdefaults"
            echo 'URxvt.shading:              20' >> "${user_home_dir}/.Xdefaults"
        fi
        echo 'URxvt.fading:               0' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.loginShell:           true' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.saveLines:            1000000' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.internalBorder:       3' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.lineSpace:            0' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.scrollStyle:          rxvt' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.scrollBar:            false' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.cursorBlink:          true' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.cursorColor:          #657b83' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.cursorUnderline:      false' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.pointerBlank:         true' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt*font:                 xft:ForMateKonaVe:pixelsize=14' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt*letterSpace:          -1' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.perl-ext-common:      default,matcher' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.matcher.button:       1' >> "${user_home_dir}/.Xdefaults"
        echo 'URxvt.urlLauncher:          x-www-browser' >> "${user_home_dir}/.Xdefaults"
        echo '*background:                #001E27' >> "${user_home_dir}/.Xdefaults"
        echo '*foreground:                #9CC2C3' >> "${user_home_dir}/.Xdefaults"
        echo '*fadeColor:                 #002832' >> "${user_home_dir}/.Xdefaults"
        echo '*cursorColor:               #F34F00' >> "${user_home_dir}/.Xdefaults"
        echo '*pointerColorBackground:    #003747' >> "${user_home_dir}/.Xdefaults"
        echo '*pointerColorForeground:    #9CC2C3' >> "${user_home_dir}/.Xdefaults"
        echo '*color0:                    #002831' >> "${user_home_dir}/.Xdefaults"
        echo '*color1:                    #D11C24' >> "${user_home_dir}/.Xdefaults"
        echo '*color2:                    #6CBE6C' >> "${user_home_dir}/.Xdefaults"
        echo '*color3:                    #A57706' >> "${user_home_dir}/.Xdefaults"
        echo '*color4:                    #2176C7' >> "${user_home_dir}/.Xdefaults"
        echo '*color5:                    #C61C6F' >> "${user_home_dir}/.Xdefaults"
        echo '*color6:                    #259286' >> "${user_home_dir}/.Xdefaults"
        echo '*color7:                    #EAE3CB' >> "${user_home_dir}/.Xdefaults"
        echo '*color8:                    #006488' >> "${user_home_dir}/.Xdefaults"
        echo '*color9:                    #F5163B' >> "${user_home_dir}/.Xdefaults"
        echo '*color10:                   #51EF84' >> "${user_home_dir}/.Xdefaults"
        echo '*color11:                   #B27E28' >> "${user_home_dir}/.Xdefaults"
        echo '*color12:                   #178EC8' >> "${user_home_dir}/.Xdefaults"
        echo '*color13:                   #E24D8E' >> "${user_home_dir}/.Xdefaults"
        echo '*color14:                   #00B39E' >> "${user_home_dir}/.Xdefaults"
        echo '*color15:                   #FCF4DC' >> "${user_home_dir}/.Xdefaults"

        # symlink Xdefaults to Xresoures for compatibility
        ln -s $user_home_dir/.Xdefaults $user_home_dir/.Xresources

        # create urxvtq launcher
        mkdir -p "${user_home_dir}/.bin"
        echo "#!/bin/bash" > "${user_home_dir}/.bin/urxvtq"
        echo 'if [ $(ps aux | grep -v grep | grep -c "urxvt -name urxvtq") -eq 0 ]' >> "${user_home_dir}/.bin/urxvtq"
        echo 'then' >> "${user_home_dir}/.bin/urxvtq"
        echo '    rm -f /tmp/.urxvtq' >> "${user_home_dir}/.bin/urxvtq"
        echo '    urxvt -name urxvtq -geometry 200x24 &' >> "${user_home_dir}/.bin/urxvtq"
        echo 'fi' >> "${user_home_dir}/.bin/urxvtq"
        echo 'while [ -z "$wid" ]; do wid=$(xdotool search --name urxvtq); done' >> "${user_home_dir}/.bin/urxvtq"
        echo 'if [ -f "/tmp/.urxvtq" ]' >> "${user_home_dir}/.bin/urxvtq"
        echo 'then' >> "${user_home_dir}/.bin/urxvtq"
        echo '    xdotool windowunmap $wid' >> "${user_home_dir}/.bin/urxvtq"
        echo '    rm -f /tmp/.urxvtq' >> "${user_home_dir}/.bin/urxvtq"
        echo 'else' >> "${user_home_dir}/.bin/urxvtq"
        echo '    xdotool windowmap --sync $wid' >> "${user_home_dir}/.bin/urxvtq"
        echo '    xdotool windowfocus $wid' >> "${user_home_dir}/.bin/urxvtq"
        echo '    xdotool windowactivate $wid &> /dev/null' >> "${user_home_dir}/.bin/urxvtq"
        echo '    touch /tmp/.urxvtq' >> "${user_home_dir}/.bin/urxvtq"
        echo 'fi' >> "${user_home_dir}/.bin/urxvtq"
        chmod +x "${user_home_dir}/.bin/urxvtq"
    fi

    # turn on openbox-session with `startx`
    if which openbox-session &> /dev/null
    then
        echo "exec openbox-session" > "${user_home_dir}/.xinitrc"
    fi

    # configure openbox
    if which openbox &> /dev/null
    then

        # make openbox directories & copy default files from xdg
        mkdir -p "${user_home_dir}/.config/openbox/"
        cp /etc/xdg/openbox/* "${user_home_dir}/.config/openbox/"

        # configure openbox autostart
        echo "#!/bin/sh" > "${user_home_dir}/.config/openbox/autostart"
        echo 'which xrdb &> /dev/null && [ -f "$HOME/.Xresources" ] || [ -L "$HOME/.Xresources" ] && xrdb -merge "$HOME/.Xresources"' >> "${user_home_dir}/.config/openbox/autostart"
        echo "which xdg-user-dirs-update &> /dev/null && (xdg-user-dirs-update) &" >> "${user_home_dir}/.config/openbox/autostart"
        echo "which compton &> /dev/null && (compton -c) &" >> "${user_home_dir}/.config/openbox/autostart"
        echo 'which hsetroot &> /dev/null && (hsetroot -solid "#001E27") &' >> "${user_home_dir}/.config/openbox/autostart"
        echo "which xset &> /dev/null && (xset r rate 250 25 & xset b off & xset m 7 5 & xset -dpms & xset s off) &" >> "${user_home_dir}/.config/openbox/autostart"
        echo '[ -f "$HOME/.fehbg" ] && [ -d "$HOME/.wallpaper/" ] && [ $(find ~/.wallpaper/ -type f | wc -l) -gt 0 ] && . "$HOME/.fehbg"' >> "${user_home_dir}/.config/openbox/autostart"
        echo "which tint2 &> /dev/null && (tint2) &" >> "${user_home_dir}/.config/openbox/autostart"
        echo "which clipit &> /dev/null && (sleep 2 && clipit) &" >> "${user_home_dir}/.config/openbox/autostart"
        echo "which volumeicon &> /dev/null && (sleep 2 && volumeicon) &" >> "${user_home_dir}/.config/openbox/autostart"
        echo "which conky &> /dev/null && (sleep 10 && conky -d -q) &" >> "${user_home_dir}/.config/openbox/autostart"

        # configure openbox menu (~/.config/openbox/menu.xml)
        echo '<?xml version="1.0" encoding="UTF-8"?>' > "${user_home_dir}/.config/openbox/menu.xml"
        echo '<openbox_menu xmlns="http://openbox.org/"' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '    xsi:schemaLocation="http://openbox.org/' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '    file:///usr/share/openbox/menu.xsd">' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '    <menu id="root-menu" label="Openbox 3">' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="web"><action name="Execute"><execute>x-www-browser</execute></action></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="editor"><action name="Execute"><execute>subl</execute></action></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="cli"><action name="Execute"><execute>x-terminal-emulator</execute></action></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="files"><action name="Execute"><execute>pcmanfm</execute></action></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <menu id="/Debian" />' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <separator />' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <menu id="client-list-menu" />' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <separator />' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="ObConf"><action name="Execute"><execute>obconf</execute></action></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="Reconfigure"><action name="Reconfigure" /></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="Restart"><action name="Restart" /></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '        <item label="Exit"><action name="Exit"><prompt>no</prompt></action></item>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '    </menu>' >> "${user_home_dir}/.config/openbox/menu.xml"
        echo '</openbox_menu>' >> "${user_home_dir}/.config/openbox/menu.xml"

        # configure openbox theme & settings (~/.config/openbox/rc.xml)
        echo '<?xml version="1.0" encoding="UTF-8"?>' > "${user_home_dir}/.config/openbox/rc.xml"
        echo '<openbox_config xmlns="http://openbox.org/3.4/rc" xmlns:xi="http://www.w3.org/2001/XInclude">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <resistance><strength>10</strength><screen_edge_strength>20</screen_edge_strength></resistance>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <focus><focusNew>yes</focusNew><followMouse>no</followMouse><focusLast>yes</focusLast><underMouse>no</underMouse><focusDelay>200</focusDelay><raiseOnFocus>no</raiseOnFocus></focus>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <placement><policy>Smart</policy><center>yes</center><monitor>Primary</monitor><primaryMonitor>1</primaryMonitor></placement>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <theme>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <name>Mire_v2_orange</name>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <titleLayout>NLIMC</titleLayout>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keepBorder>yes</keepBorder>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <animateIconify>yes</animateIconify>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <font place="ActiveWindow"><name>ForMateKonaVe</name><size>8</size><weight>bold</weight><slant>normal</slant></font>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <font place="InactiveWindow"><name>ForMateKonaVe</name><size>8</size><weight>bold</weight><slant>normal</slant></font>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <font place="MenuHeader"><name>ForMateKonaVe</name><size>9</size><weight>normal</weight><slant>normal</slant></font>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <font place="MenuItem"><name>ForMateKonaVe</name><size>9</size><weight>normal</weight><slant>normal</slant></font>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <font place="ActiveOnScreenDisplay"><name>ForMateKonaVe</name><size>9</size><weight>bold</weight><slant>normal</slant></font>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <font place="InactiveOnScreenDisplay"><name>ForMateKonaVe</name><size>9</size><weight>bold</weight><slant>normal</slant></font>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    </theme>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <desktops><number>3</number><firstdesk>1</firstdesk><names></names><popupTime>875</popupTime></desktops>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <resize><drawContents>yes</drawContents><popupShow>Nonpixel</popupShow><popupPosition>Center</popupPosition><popupFixedPosition><x>10</x><y>10</y></popupFixedPosition></resize>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <margins><top>0</top><bottom>0</bottom><left>0</left><right>0</right></margins>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <dock><position>TopLeft</position><floatingX>0</floatingX><floatingY>0</floatingY><noStrut>no</noStrut><stacking>Above</stacking><direction>Vertical</direction><autoHide>no</autoHide><hideDelay>300</hideDelay><showDelay>300</showDelay><moveButton>Middle</moveButton></dock>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <keyboard>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <chainQuitKey>C-g</chainQuitKey>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-A-Left"><action name="GoToDesktop"><to>left</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-A-Right"><action name="GoToDesktop"><to>right</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-A-Up"><action name="GoToDesktop"><to>up</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-A-Down"><action name="GoToDesktop"><to>down</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="S-A-Left"><action name="SendToDesktop"><to>left</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="S-A-Right"><action name="SendToDesktop"><to>right</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="S-A-Up"><action name="SendToDesktop"><to>up</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="S-A-Down"><action name="SendToDesktop"><to>down</to><wrap>no</wrap></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-1"><action name="GoToDesktop"><to>1</to></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-2"><action name="GoToDesktop"><to>2</to></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-3"><action name="GoToDesktop"><to>3</to></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-d"><action name="ToggleShowDesktop"/></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="A-F4"><action name="Close"/></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="A-Escape"><action name="Lower"/><action name="FocusToBottom"/><action name="Unfocus"/></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="A-space"><action name="ShowMenu"><menu>client-menu</menu></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="A-Tab"><action name="NextWindow"><finalactions><action name="Focus"/><action name="Raise"/><action name="Unshade"/></finalactions></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="A-S-Tab"><action name="PreviousWindow"><finalactions><action name="Focus"/><action name="Raise"/><action name="Unshade"/></finalactions></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="C-A-Tab"><action name="NextWindow"><panels>yes</panels><desktop>yes</desktop><finalactions><action name="Focus"/><action name="Raise"/><action name="Unshade"/></finalactions></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-S-Right"><action name="DirectionalCycleWindows"><direction>right</direction></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-S-Left"><action name="DirectionalCycleWindows"><direction>left</direction></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-S-Up"><action name="DirectionalCycleWindows"><direction>up</direction></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-S-Down"><action name="DirectionalCycleWindows"><direction>down</direction></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-w"><action name="Execute"><command>x-www-browser</command></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-t"><action name="Execute"><command>x-terminal-emulator</command></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-grave"><action name="Execute"><execute>urxvtq</execute></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-e"><action name="Execute"><command>subl</command></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-f"><action name="Execute"><command>pcmanfm</command></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-m"><action name="Execute"><command>vlc</command></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-space"><action name="Execute"><command>gmrun</command></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-Tab"><action name="ShowMenu"><menu>root-menu</menu></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <keybind key="W-x"><action name="Exit"><prompt>no</prompt></action></keybind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    </keyboard>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <mouse>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <dragThreshold>1</dragThreshold>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <doubleClickTime>200</doubleClickTime>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <screenEdgeWarpTime>400</screenEdgeWarpTime>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <screenEdgeWarpMouse>false</screenEdgeWarpMouse>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Frame">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Left" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Left" action="Click"><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Left" action="Drag"><action name="Move"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Right" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Right" action="Drag"><action name="Resize"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Middle" action="Press"><action name="Lower"/><action name="FocusToBottom"/><action name="Unfocus"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="C-A-Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="C-A-Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-S-Up" action="Click"><action name="SendToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-S-Down" action="Click"><action name="SendToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Titlebar">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Drag"><action name="Move"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="DoubleClick"><action name="ToggleMaximize"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Up" action="Click"><action name="if"><shaded>no</shaded><then><action name="Shade"/><action name="FocusToBottom"/><action name="Unfocus"/><action name="Lower"/></then></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Down" action="Click"><action name="if"><shaded>yes</shaded><then><action name="Unshade"/><action name="Raise"/></then></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Titlebar Top Right Bottom Left TLCorner TRCorner BRCorner BLCorner">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Middle" action="Press"><action name="Lower"/><action name="FocusToBottom"/><action name="Unfocus"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="Focus"/><action name="Raise"/><action name="ShowMenu"><menu>client-menu</menu></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Top">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Drag"><action name="Resize"><edge>top</edge></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Left">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Drag"><action name="Resize"><edge>left</edge></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Right">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Drag"><action name="Resize"><edge>right</edge></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Bottom">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Drag"><action name="Resize"><edge>bottom</edge></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="Focus"/><action name="Raise"/><action name="ShowMenu"><menu>client-menu</menu></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="TRCorner BRCorner TLCorner BLCorner">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Drag"><action name="Resize"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Client">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Middle" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Icon">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/><action name="ShowMenu"><menu>client-menu</menu></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="Focus"/><action name="Raise"/><action name="ShowMenu"><menu>client-menu</menu></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="AllDesktops">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Click"><action name="ToggleOmnipresent"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Shade">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Click"><action name="ToggleShade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Iconify">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Click"><action name="Iconify"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Maximize">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Middle" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Click"><action name="ToggleMaximize"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Middle" action="Click"><action name="ToggleMaximize"><direction>vertical</direction></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Click"><action name="ToggleMaximize"><direction>horizontal</direction></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Close">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/><action name="Unshade"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Click"><action name="Close"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Desktop">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="C-A-Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="C-A-Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Left" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="Focus"/><action name="Raise"/></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="Root">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Middle" action="Press"><action name="ShowMenu"><menu>client-list-combined-menu</menu></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Right" action="Press"><action name="ShowMenu"><menu>root-menu</menu></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <context name="MoveResize">' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Up" action="Click"><action name="GoToDesktop"><to>previous</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '            <mousebind button="A-Down" action="Click"><action name="GoToDesktop"><to>next</to></action></mousebind>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        </context>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    </mouse>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <menu><file>/var/lib/openbox/debian-menu.xml</file><file>menu.xml</file><hideDelay>200</hideDelay><middle>no</middle><submenuShowDelay>100</submenuShowDelay><submenuHideDelay>400</submenuHideDelay><applicationIcons>yes</applicationIcons><manageDesktops>no</manageDesktops></menu>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    <applications>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '        <application name="urxvtq"><decor>no</decor><position force="yes"><x>center</x><y>0</y></position><desktop>all</desktop><layer>above</layer><skip_pager>yes</skip_pager><skip_taskbar>yes</skip_taskbar><maximized>Horizontal</maximized></application>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '    </applications>' >> "${user_home_dir}/.config/openbox/rc.xml"
        echo '</openbox_config>' >> "${user_home_dir}/.config/openbox/rc.xml"

    fi

    # configute clipit
    if which clipit &> /dev/null
    then
        mkdir -p "${user_home_dir}/.config/clipit"
        echo "[rc]" > "${user_home_dir}/.config/clipit/clipitrc"
        echo "use_copy=true" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "use_primary=true" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "synchronize=true" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "automatic_paste=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "show_indexes=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "save_uris=true" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "use_rmb_menu=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "save_history=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "history_limit=50" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "items_menu=20" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "statics_show=true" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "statics_items=10" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "hyperlinks_only=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "confirm_clear=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "single_line=true" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "reverse_history=false" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "item_length=50" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "ellipsize=2" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "history_key=<Ctrl><Alt>H" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "actions_key=<Ctrl><Alt>A" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "menu_key=<Ctrl><Alt>P" >> "${user_home_dir}/.config/clipit/clipitrc"
        echo "search_key=<Ctrl><Alt>F" >> "${user_home_dir}/.config/clipit/clipitrc"
    fi

    # configure conky
    if which conky &> /dev/null
    then

        # conky lua transparency
        if ! which compton &> /dev/null
        then
            mkdir -p "${user_home_dir}/.conkyrc.d/scripts/lua"
            echo "-- dependencies" > "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "require 'cairo'" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "-- settings" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "bg_colour = 0x000000" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "bg_alpha = 0.35" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "corner_r = 10" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "-- rgb converter" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "function rgb_to_r_g_b(colour,alpha)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    return ((colour / 0x10000) % 0x100) / 255., ((colour / 0x100) % 0x100) / 255., (colour % 0x100) / 255., alpha" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "end" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "-- primary bg function" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "function conky_draw_bg()" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    if conky_window == nil then return end" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    local w = conky_window.width" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    local h = conky_window.height" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "-- create starting point (x/y)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    local cs = cairo_xlib_surface_create(conky_window.display, conky_window.drawable, conky_window.visual, w, h)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cr = cairo_create(cs)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "-- draw a box to fill" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_move_to(cr, corner_r, 0)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_line_to(cr, w-corner_r, 0)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_curve_to(cr, w, 0, w, 0, w, corner_r)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_line_to(cr, w, h-corner_r)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_curve_to(cr, w, h, w, h, w-corner_r, h)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_line_to(cr, corner_r, h)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_curve_to(cr, 0, h, 0, h, 0, h-corner_r)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_line_to(cr, 0, corner_r)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_curve_to(cr, 0, 0, 0, 0, corner_r, 0)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_close_path(cr)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "-- set fill color and fill" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_set_source_rgba(cr, rgb_to_r_g_b(bg_colour, bg_alpha))" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "    cairo_fill(cr)" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
            echo "end" >> "${user_home_dir}/.conkyrc.d/scripts/lua/bg"
        fi

        # conky slim config
        mkdir -p "${user_home_dir}/.conkyrc.d/"
        echo "background yes" > "${user_home_dir}/.conkyrc.d/slim"
        echo "update_interval 1.0" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "cpu_avg_samples 5" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "net_avg_samples 5" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "diskio_avg_samples 5" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "alignment tm" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "gap_y 0" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "gap_x 0" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "use_xft yes" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "xftalpha 0.2" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "xftfont ForMateKonaVe:size=9" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "uppercase no" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "override_utf8_locale yes" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "default_color 6CBE6C" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "own_window yes" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager" >> "${user_home_dir}/.conkyrc.d/slim"
        if which compton &> /dev/null
        then
            echo "own_window_transparent no" >> "${user_home_dir}/.conkyrc.d/slim"
            echo "own_window_argb_visual yes" >> "${user_home_dir}/.conkyrc.d/slim"
            echo "own_window_argb_value 30" >> "${user_home_dir}/.conkyrc.d/slim"
        else
            echo "own_window_transparent yes" >> "${user_home_dir}/.conkyrc.d/slim"
            echo "lua_load ~/.conkyrc.d/scripts/lua/bg" >> "${user_home_dir}/.conkyrc.d/slim"
            echo "lua_draw_hook_pre draw_bg" >> "${user_home_dir}/.conkyrc.d/slim"
        fi
        echo "double_buffer yes" >> "${user_home_dir}/.conkyrc.d/slim"
        echo "TEXT" >> "${user_home_dir}/.conkyrc.d/slim"
        echo 'cpu ${cpubar cpu0 8,120}             ${alignc}mem  ${membar 5,120}          ${alignr}/     ${fs_bar 5,120 /}' >> "${user_home_dir}/.conkyrc.d/slim"
        echo '    ${offset 120}             ${alignc}swap ${swapbar 5,120}          ${alignr}/home ${fs_bar 5,120 /home}' >> "${user_home_dir}/.conkyrc.d/slim"
        echo '${time %H:%M, %Y/%m/%d}${offset 120}${alignc}${addr}${offset 120}${alignr}${uptime}' >> "${user_home_dir}/.conkyrc.d/slim"

        # symlink default conky to slim config
        ln -s "${user_home_dir}/.conkyrc.d/slim" "${user_home_dir}/.conkyrc"
    fi

    # configure volumeicon
    if which volumeicon &> /dev/null
    then
        mkdir -p "${user_home_dir}/.config/volumeicon"
        echo "[StatusIcon]" > "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "stepsize=3" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "lmb_slider=false" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "mmb_mute=false" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "use_horizontal_slider=true" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "show_sound_level=true" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "onclick=x-terminal-emulator -e 'alsamixer'" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "theme=Default" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "[Hotkeys]" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "up_enabled=true" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "down_enabled=true" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "mute_enabled=true" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "up=XF86AudioRaiseVolume" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "down=XF86AudioLowerVolume" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "mute=XF86AudioMute" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "[Alsa]" >> "${user_home_dir}/.config/volumeicon/volumeicon"
        echo "card=default" >> "${user_home_dir}/.config/volumeicon/volumeicon"
    fi

    # configure weechat
    if which weechat-curses &> /dev/null
    then

        # generate dependent weechat files files
        su $config_system_username -s /bin/bash -c 'weechat-curses &> /dev/null & pid=$!
            while ! ([ -f ~/.weechat/irc.conf ] && [ -f ~/.weechat/weechat.conf ]); do :; done;
            kill -9 $pid'

        # set configuration values
        mkdir -p "${user_home_dir}/.weechat"
        sed -i 's/max_buffer_lines_number.*/max_buffer_lines_number = 0/' "${user_home_dir}/.weechat/weechat.conf"
        sed -i 's/freenode\.autoconnect.*/freenode\.autoconnect = on/' "${user_home_dir}/.weechat/irc.conf"
        sed -i 's/freenode\.nicks.*/freenode\.nicks = \"${config_irc_username}, ${config_irc_username}_\"/' "${user_home_dir}/.weechat/irc.conf"
        sed -i 's/freenode\.password.*/freenode\.password = \"${config_irc_password}\"/' "${user_home_dir}/.weechat/irc.conf"
    fi

    # install independent gui software
    if which openbox &> /dev/null
    then

        # download and install sublime text for system user
        curl -o /tmp/sublime.tar.bz2 http://c758482.r82.cf2.rackcdn.com/sublime_text_3_build_3059_x64.tar.bz2
        tar xf /tmp/sublime.tar.bz2 -C /tmp
        rm /tmp/sublime.tar.bz2

        # modify all of the below commands, remove the su, and append the path
        chown -R $config_system_username:$config_system_username /tmp/sublime_text_3
        mkdir -p "${user_home_dir}/applications" "${user_home_dir}/.bin" "${user_home_dir}/.config/sublime-text-3/Packages/User" "${user_home_dir}/.config/sublime-text-3/Installed Packages/"
        mv /tmp/sublime_text_3 "${user_home_dir}/applications/sublime_text"
        ln -s "${user_home_dir}/applications/sublime_text/sublime_text" "${user_home_dir}/.bin/subl"

        # install sublime package control
        curl -o "${user_home_dir}/.config/sublime-text-3/Installed Packages/Package Control.sublime-package" "https://sublime.wbond.net/Package%20Control.sublime-package"

        # populate sublime preferences
        echo '{' > "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "auto_complete_commit_on_tab": true,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "caret_style": "phase",' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "color_scheme": "Packages/Color Scheme - Default/Sunburst.tmTheme",' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "font_face": "ForMateKonaVe",' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "font_size": 14,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "highlight_line": true,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "highlight_modified_tabs": true,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "match_brackets_angle": true,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "scroll_past_end": true,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "scroll_speed": 2.0,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "translate_tabs_to_spaces": true,' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '    "trim_trailing_white_space_on_save": true' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        echo '}' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"

        # configure hotkeys (some are plugin dependent and will simply not work)
        echo '[' > "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo '    { "keys": ["ctrl+enter"], "command": "goto_python_definition"},' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo '    { "keys": ["ctrl+tab"], "command": "next_view" },' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo '    { "keys": ["ctrl+shift+tab"], "command": "prev_view" },' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo '    { "keys": ["alt+m"], "command": "markdown_preview", "args":' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo '        { "target": "browser", "parser": "markdown" }' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo '    }' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
        echo ']' >> "${user_home_dir}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"

        # populate sublime preferences
        # su $config_system_username -c "echo '{' > ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"auto_complete_commit_on_tab\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"caret_style\": \"phase\",' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"color_scheme\": \"Packages/Color Scheme - Default/Sunburst.tmTheme\",' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"font_face\": \"ForMateKonaVe\",' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"font_size\": 14,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"highlight_line\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"highlight_modified_tabs\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"match_brackets_angle\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"scroll_past_end\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"scroll_speed\": 2.0,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"translate_tabs_to_spaces\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '    \"trim_trailing_white_space_on_save\": true' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        # su $config_system_username -c "echo '}' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"

        # configure hotkeys (some are plugin dependent and will simply not work)
        # su $config_system_username -c 'echo "[" > "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "    { \"keys\": [\"ctrl+enter\"], \"command\": \"goto_python_definition\"}," >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "    { \"keys\": [\"ctrl+tab\"], \"command\": \"next_view\" }," >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "    { \"keys\": [\"ctrl+shift+tab\"], \"command\": \"prev_view\" }," >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "    { \"keys\": [\"alt+m\"], \"command\": \"markdown_preview\", \"args\":" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "        { \"target\": \"browser\", \"parser\": \"markdown\" }" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "    }" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        # su $config_system_username -c 'echo "]" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'

        # so far there is no easy way to install or manage packages from bash or subl cli

    fi

    # install custom fonts locally
    if [ $config_jis_support ]
    then
        mkdir -p "${user_home_dir}/.fonts"
        curl -o "${user_home_dir}/.fonts/ForMateKonaVe.ttf" "https://raw.githubusercontent.com/cdelorme/system-setup/master/data/fonts/ForMateKonaVe.ttf"
        curl -o "${user_home_dir}/.fonts/epkyouka.ttf" "https://raw.githubusercontent.com/cdelorme/system-setup/master/data/fonts/epkyouka.ttf"
        fc-cache -fr
    fi

    # reset ownership on users home directory & files
    chown -R $config_system_username:$config_system_username $user_home_dir

    # user-dot-files
    user_dot_files

}

restart_services() {
    service ssh restart
    /etc/network/if-up.d/iptables
}


##
# main systems
##

automate_nix() {

    echo "linux: ${1} configuration will proceed in 3 seconds"
    echo "press ctrl+c before then to cancel"
    sleep 3

    # package dependencies
    install_linux_packages $1

    # async operations
    configure_linux_services &
    create_crontabs &
    configure_monit &
    configure_hosts &
    firewall_rules &

    # create & configure user
    create_user
    configure_user_services

    # restart services (dangerous)
    # restart_services
}

automate_osx() {

    # still researching osx config options
    # we will need root privileges for certain commands
    # however we do not want to run the script as root
    # we could run sudo once to do an echo which would start the prompt
    # but that would only last a few minutes
    # if our install process takes a while it may not complete the required actions
    # which means they would have to answer the prompt again later

    # package dependencies
    install_osx_packages

    # async operations
    configure_osx_services &
    configure_hosts &
    do_dot_files &
    configure_user_services &

}


##
# acquire system information
##

# check for osx, or assume linux
if [ $(uname) = "Darwin" ]
then
    OSX=true
else
    LINUX=true
fi

# currently only works with debian compatible distros and osx
# future iterations may add support for other distros

# begin tee'd log redirection
exec &> >(tee "$0.log")

# switch to /tmp for permission related concerns
if [ -d /tmp ]
then
    cd /tmp
fi

# prepare dl command as a backup to acquire any missing data files
if which curl &> /dev/null
then
    dlcmd="curl -L -o "
elif which wget &> /dev/null
then
    dlcmd="wget -O "
fi


##
# check args && run operations
##

case "$1" in
        -h|--help)
                echo "$0 - custom automated system configuration script"
                echo " "
                echo "usage example: $0 [option]"
                echo " "
                echo "options:"
                echo "  template                   a linux template"
                echo "  comm                       template + communications & file server"
                echo "  gui                        template + openbox gui & basic UI software"
                echo "  all                        template + comm + gui"
                echo "  osx                        run custom osx configurations (some interaction required)"
                echo " "
                echo "please open the script and modify the configuration defaults before execution."
                exit 0
                ;;
        template)
            automate_nix
            ;;
        comm)
            automate_nix comm
            ;;
        gui)
            automate_nix gui
            ;;
        all)
            automate_nix all
            ;;
        osx)
            automate_osx
            ;;
        *)
            $0 -h
            ;;
esac
