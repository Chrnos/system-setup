#!/bin/bash
# root permissions expected

# -----------------------------------------------------------------------------
##
# set configuration data
##

# set hostname & domain name
config_system_hostname="dev"
config_system_domainname="domain.dev"

# [install my dot-files](https://github.com/cdelorme/dot-files)
config_install_dot_files=true

# username & password
config_system_username="cdelorme"
config_system_password="pw"

# github username and password
config_github_username="cdelorme"
config_github_password=""

# irc configuration
config_irc_username="${config_system_username}"
config_irc_password="pw"


##
# linux only
##

# install to /etc/skel
config_skel_dot_files=true

# adjust default ssh port
config_ssh_port=9004

# set timezone (default is EST)
config_system_timezone=/usr/share/zoneinfo/US/Eastern

# monit web access
config_monit_web=true
config_monit_web_port=9005

# enable japanese UTF8 support
config_jis_support=true

# transmission config settings
config_bt_max_down=3000
config_bt_max_up=80
config_bt_watch_path="/tmp"
config_bt_incomplete_path="/tmp"
config_bt_complete_path="/tmp"
config_bt_web_accessible=true
config_bt_web_port=9010


##
# end of config data, do not modify contents below
##
# -----------------------------------------------------------------------------

##
# universal operations
##

configure_hosts() {

    # set hostname & domainname
    if [ $OSX ]
    then
        scutil --set HostName "${config_system_hostname}"
        domainname "${config_system_domainname}"
    else
        echo "${config_system_hostname}" > /etc/hostname
        hostname -F /etc/hostname
        sed -i "s/127.0.1.1.*/127.0.1.1 ${config_system_hostname}.${config_system_domainname} ${config_system_hostname}/" /etc/hosts
    fi

}

do_dot_files() {

    # download and install my dot files
    if [ $config_install_dot_files ]
    then
        if ! [ -f /tmp/install ]
        then
            wget -O /tmp/install "https://raw.githubusercontent.com/cdelorme/dot-files/master/install"
            chmod +x /tmp/install
        fi
        dot_files_root
        create_user $1
        dot_files_user
        configure_user $1
    fi

}

dot_files_user() {

    # create a copy of the install script in the users home folder to resolve execution conflicts
    su $config_system_username -s /bin/bash -c "cp /tmp/install ~/install"

    # run dot-files as user
    if [ -n "$config_github_username" ]
    then

        # add flag for user password to generate an ssl certificate

        if [ -n "$config_github_password" ]
        then
            su $config_system_username -s /bin/bash -c "~/install -a -u \"${config_github_username}\" -p \"${config_github_password}\""
        else
            su $config_system_username -s /bin/bash -c "~/install -a -u \"${config_github_username}\""
        fi
    else
        su $config_system_username -s /bin/bash -c "~/install -a"
    fi

    # cleanup
    su $config_system_username -s /bin/bash -c "rm -rf ~/install.log ~/downloads ~/install"

}


##
# osx operations
##

install_osx_packages() {
    echo "incomplete: install_osx_packages"
}

configure_osx_services() {
    echo "incomplete: configure_osx_services"
}


##
# linux operations
##

install_linux_packages() {

    if [ "$1" = "gui" ] || [ "$1" = "all" ]
    then

        if ! [ -f /etc/apt/sources.list.d/google.list ]
        then

            # add google chrome to aptitude sources
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
            echo "# Google Chrome repo http://www.google.com/linuxrepositories/" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/talkplugin/deb/ stable main" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/earth/deb/ stable main" >> /etc/apt/sources.list.d/google.list
            echo "deb http://dl.google.com/linux/musicmanager/deb/ stable main" >> /etc/apt/sources.list.d/google.list
        fi


    fi

    if ! which netselect-apt &> /dev/null
    then
        aptitude install -ryq netselect-apt
        netselect-apt -sn
        aptitude clean
        aptitude update
        dpkg -rq vim-common vim-tiny
        aptitude reinstall -ryq usbutils bzip2 unzip xz-utils netselect-apt whois fakeroot e2fsprogs os-prober bash-completion bc less anacron avahi-daemon libnss-mdns wireless-tools
        aptitude install -ryq firmware-linux firmware-linux-free firmware-linux-nonfree usbutils uuid-runtime debconf-utils cpufrequtils bzip2 lzop p7zip-full zip unzip unrar xz-utils unace rzip unalz zoo arj netselect-apt ssh curl ntp rsync whois vim git git-flow mercurial debhelper libncurses5-dev kernel-package build-essential fakeroot e2fsprogs parted sshfs fuse-utils gvfs-fuse exfat-fuse exfat-utils fusesmb os-prober sudo bash-completion command-not-found tmux screen bc less keychain pastebinit anacron miscfiles monit markdown avahi-utils avahi-daemon libnss-mdns wireless-tools htop linux-headers-3.2.0-4-all lm-sensors resolvconf watchdog g++
    fi

    if [ "$1" = "comm" ] || [ "$1" = "all" ]
    then

        # settings for mdadm package
        echo "mdadm   mdadm/autostart boolean true" | debconf-set-selections
        echo "mdadm   mdadm/autocheck boolean true" | debconf-set-selections
        echo "mdadm   mdadm/mail_to   string  root" | debconf-set-selections
        echo "mdadm   mdadm/initrdstart   string  all" | debconf-set-selections
        echo "mdadm   mdadm/initrdstart_notinconf boolean false" | debconf-set-selections
        echo "mdadm   mdadm/start_daemon  boolean true" | debconf-set-selections

        # install communications server packages
        aptitude install -ryq samba samba-tools smbclient mdadm weechat-curses transmission-daemon
    fi

    if [ "$1" = "gui" ] || [ "$1" = "all" ]
    then
        aptitude install -ryq desktop-base openbox obconf obmenu menu tint2 conky-all chromium zenity zenity-common pcmanfm alsa-base alsa-utils pulseaudio volumeicon-alsa feh hsetroot rxvt-unicode slim xorg xserver-xorg-video-all x11-server-utils xinit xinput xtightvncviewer suckless-tools gmrun arandr clipit xsel gksu catfish fbxkb openbox-themes dmz-cursor-theme gnome-icon-theme gnome-icon-theme-extras lxappearance gparted vlc gtk-recordmydesktop chromium transmission transmission-cli openshot flashplugin-nonfree lame ffmpeg shared-mime-info fontconfig fontconfig-config fonts-droid fonts-droid fonts-freefont fonts-liberation fonts-takao ttf-mscorefonts-installer gimp gimp-plugin-registry evince bpython libX11-dev libmcrypt-dev python-dev python3-dev libperl-dev openjdk-7-jre yeahconsole google-chrome-stable google-chrome-unstable google-talkplugin
    fi

    # update our command-not-found cache
    if which update-command-not-found &> /dev/null
    then
        update-command-not-found
    fi

}

configure_linux_services() {

    # ensure watchdog is enabled
    update-rc.d watchdog defaults

    # enable lvm trim support
    sed -i 's/issue_discards = 0/issue_discards = 1/' /etc/lvm/lvm.conf

    # set modern umask to 002 for default matching group privileges
    sed -i 's/UMASK\s*022/UMASK        002/' /etc/login.defs
    if [ $(grep -c "umask=002" /etc/pam.d/common-session) -eq 0 ]
    then
        echo "session optional pam_umask.so umask=002" >> /etc/pam.d/common-session
    fi

    # setup timezone
    rm -rf /etc/localtime && ln -sf $config_system_timezone /etc/localtime

    # secure ssh
    sed -i "s/Port 22/Port ${config_ssh_port}/" /etc/ssh/sshd_config
    sed -i "s/^#\?PasswordAuthentication\s*[yn].*/PasswordAuthentication no/" /etc/ssh/sshd_config
    sed -i "s/^#\?PermitRootLogin.*[yn].*/PermitRootLogin no/" /etc/ssh/sshd_config
    service ssh restart

    # fix potential permission problems with logs
    chown -R root:adm /var/log/*

    # ensure vim is set as default editor
    update-alternatives --set editor /usr/bin/vim.basic

    # setup customized samba settings
    if which smbd &> /dev/null
    then
        echo "#======================= Global Settings =======================" > /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "[global]" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Naming" >> /etc/samba/smb.conf
        echo "    workgroup = WORKGROUP" >> /etc/samba/smb.conf
        echo "    server string = %h server" >> /etc/samba/smb.conf
        echo "    netbios name = comm" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Eliminate Printing" >> /etc/samba/smb.conf
        echo "    load printers = no" >> /etc/samba/smb.conf
        echo "    printing = bsd" >> /etc/samba/smb.conf
        echo "    printcap name = /dev/null" >> /etc/samba/smb.conf
        echo "    disable spoolss = yes" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Security" >> /etc/samba/smb.conf
        echo "    invalid users = nobody guest root" >> /etc/samba/smb.conf
        echo "    encrypt passwords = true" >> /etc/samba/smb.conf
        echo "    passdb backend = tdbsam" >> /etc/samba/smb.conf
        echo "    obey pam restrictions = yes" >> /etc/samba/smb.conf
        echo "    unix password sync = yes" >> /etc/samba/smb.conf
        echo "    passwd program = /usr/bin/passwd %u" >> /etc/samba/smb.conf
        echo "    passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* ." >> /etc/samba/smb.conf
        echo "    pam password change = yes" >> /etc/samba/smb.conf
        echo "    panic action = /usr/share/samba/panic-action %d" >> /etc/samba/smb.conf
        echo "    syslog = 6" >> /etc/samba/smb.conf
        echo "    log file = /var/log/samba/log.%m" >> /etc/samba/smb.conf
        echo "    max log size = 1000" >> /etc/samba/smb.conf
        echo "    disable netbios = yes" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "# Optimizations" >> /etc/samba/smb.conf
        echo "    bind interfaces only = yes" >> /etc/samba/smb.conf
        echo "    interfaces = eth0" >> /etc/samba/smb.conf
        echo "    socket options = TCP_NODELAY IPTOS_LOWDELAY SO_RCVBUF=65536 SO_SNDBUF=65536 SO_KEEPALIVE" >> /etc/samba/smb.conf
        echo "    deadtime = 15" >> /etc/samba/smb.conf
        echo "    getwd cache = yes" >> /etc/samba/smb.conf
        echo "    dns proxy = no" >> /etc/samba/smb.conf
        echo "    max connections = 30" >> /etc/samba/smb.conf
        echo "    use sendfile = yes" >> /etc/samba/smb.conf
        echo "    write cache size = 16384" >> /etc/samba/smb.conf
        echo "    aio write size = 524288" >> /etc/samba/smb.conf
        echo "    aio read size = 524288" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
        echo "#======================= Share Definitions =======================" >> /etc/samba/smb.conf
        echo "" >> /etc/samba/smb.conf
    fi

    if which transmission-daemon &> /dev/null
    then

        # temporarily turn off daemon to update settings
        service transmission-daemon stop

        # update all matched
        sed -i 's/"encryption":.*/"encryption": 2,/' /etc/transmission-daemon/settings.json
        sed -i 's/"idle-seeding-limit":.*/"idle-seeding-limit": 60,/' /etc/transmission-daemon/settings.json
        sed -i 's/"idle-seeding-limit-enabled":.*/"idle-seeding-limit-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i 's/"ratio-limit-enabled":.*/"ratio-limit-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i 's/"umask":.*/"umask": 2,/' /etc/transmission-daemon/settings.json
        sed -i 's/"speed-limit-down-enabled":.*/"speed-limit-down-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i 's/"speed-limit-up-enabled":.*/"speed-limit-up-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i "s/\"speed-limit-down\":.*/\"speed-limit-down\": ${config_bt_max_down},/" /etc/transmission-daemon/settings.json
        sed -i "s/\"speed-limit-up\":.*/\"speed-limit-up\": ${config_bt_max_up},/" /etc/transmission-daemon/settings.json
        sed -i 's/"incomplete-dir-enabled":.*/"incomplete-dir-enabled": true,/' /etc/transmission-daemon/settings.json
        sed -i "s;\"incomplete-dir\":.*;\"incomplete-dir\": \"${config_bt_incomplete_path}\",;" /etc/transmission-daemon/settings.json
        sed -i "s;\"download-dir\":.*;\"download-dir\": \"${config_bt_complete_path}\",;" /etc/transmission-daemon/settings.json

        # make web accessible
        if [ $config_bt_web_accessible ]
        then
            sed -i "s/\"rpc-port\":.*/\"rpc-port\": ${config_bt_web_port},/" /etc/transmission-daemon/settings.json
            sed -i 's;"rpc-url":.*;"rpc-url": "/bt/",;' /etc/transmission-daemon/settings.json
            sed -i "s;\"rpc-username\":.*;\"rpc-username\": \"${config_system_username}\",;" /etc/transmission-daemon/settings.json
            sed -i "s;\"rpc-password\":.*;\"rpc-password\": \"${config_system_password}\",;" /etc/transmission-daemon/settings.json
            sed -i 's;"rpc-whitelist":.*;"rpc-whitelist": "*",;' /etc/transmission-daemon/settings.json
        fi

        # conditionally replace or append
        if [ $(grep -c "watch-dir-enabled" /etc/transmission-daemon/settings.json) -eq 1 ]
        then
            sed -i 's/"watch-dir-enabled":.*/"watch-dir-enabled": true,/' /etc/transmission-daemon/settings.json
        else
            sed -i 's/"umask":.*/"umask": 2,\n    "watch-dir-enabled": true,/' /etc/transmission-daemon/settings.json
        fi
        if [ $(grep -c "watch-dir" /etc/transmission-daemon/settings.json) -eq 1 ]
        then
            sed -i "s;\"watch-dir\":.*;\"watch-dir\": \"${config_torrent_watch_path}\",;" /etc/transmission-daemon/settings.json
        else
            sed -i "s;\"umask\":.*;\"umask\": 2,\n    \"watch-dir\": \"${config_torrent_watch_path}\",;" /etc/transmission-daemon/settings.json
        fi
        if [ $(grep -c "lazy-bitfield-enabled" /etc/transmission-daemon/settings.json) -eq 1 ]
        then
            sed -i 's/"lazy-bitfield-enabled":.*/"lazy-bitfield-enabled": true,/' /etc/transmission-daemon/settings.json
        else
            sed -i 's/"umask":.*/"umask": 2,\n    "lazy-bitfield-enabled": true,/' /etc/transmission-daemon/settings.json
        fi

        # restart daemon
        service transmission-daemon start

    fi

    # patch pulseaudio bug
    if [ -f /etc/default/pulseaudio ]
    then
        sed -i "s/PULSEAUDIO_SYSTEM_START=0/PULSEAUDIO_SYSTEM_START=1/" /etc/default/pulseaudio
        if which pulseaudio &> /dev/null
        then
            service pulseaudio restart
        fi
    fi

    # disable slim at startup
    if which slim &> /dev/null
    then
        update-rc.d slim disable
    fi

    # configure graphical interface
    if [ "$1" = "" ] || [ "$1" = "all" ]
    then

        if which google-chrome-stable &> /dev/null

            # set chrome as the default browser
            update-alternatives --set x-www-browser /usr/bin/google-chrome-stable
        fi

        if which openbox &> /dev/null && which openbox-session &> /dev/null
        then

            # set default window & session manager to openbox (fallback in case other guis are installed)
            update-alternatives --set x-window-manager /usr/bin/openbox
            update-alternatives --set x-session-manager /usr/bin/openbox-session
        fi

        # download and install sublime text for system user
        curl -o /tmp/sublime.tar.bz2 http://c758482.r82.cf2.rackcdn.com/sublime_text_3_build_3059_x64.tar.bz2
        tar xf /tmp/sublime.tar.bz2 -C /tmp
        rm /tmp/sublime.tar.bz2
        chown -R $config_system_username:$config_system_username /tmp/sublime_text_3
        su $config_system_username -c "mkdir -p ~/applications"
        su $config_system_username -c "mv /tmp/sublime_text_3 ~/applications/sublime_text"
        su $config_system_username -c "mkdir -p ~/bin"
        su $config_system_username -c "ln -s ~/applications/sublime_text/sublime_text ~/bin/subl"

        # install sublime package control
        su $config_system_username -c 'curl -o "$HOME/.config/sublime-text-3/Installed Packages/Package Control.sublime-package" "https://sublime.wbond.net/Package%20Control.sublime-package"'

        # populate sublime preferences
        su $config_system_username -c "echo '{' > ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"auto_complete_commit_on_tab\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"caret_style\": \"phase\",' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"color_scheme\": \"Packages/Color Scheme - Default/Sunburst.tmTheme\",' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"font_face\": \"ForMateKonaVe\",' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"font_size\": 14,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"highlight_line\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"highlight_modified_tabs\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"match_brackets_angle\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"scroll_past_end\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"scroll_speed\": 2.0,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"translate_tabs_to_spaces\": true,' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '    \"trim_trailing_white_space_on_save\": true' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
        su $config_system_username -c "echo '}' >> ~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"

        # configure hotkeys (some are plugin dependent and will simply not work)
        su $config_system_username -c 'echo "[" > "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "    { \"keys\": [\"ctrl+enter\"], \"command\": \"goto_python_definition\"}," >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "    { \"keys\": [\"ctrl+tab\"], \"command\": \"next_view\" }," >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "    { \"keys\": [\"ctrl+shift+tab\"], \"command\": \"prev_view\" }," >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "    { \"keys\": [\"alt+m\"], \"command\": \"markdown_preview\", \"args\":" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "        { \"target\": \"browser\", \"parser\": \"markdown\" }" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "    }" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'
        su $config_system_username -c 'echo "]" >> "$HOME/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"'

        # so far there is no easy way to install or manage packages from bash or subl cli

    fi

}

create_crontabs() {

    if ! [ -f /etc/cron.weekly/disk_maintenance ]
    then
        echo "#!/bin/bash" > /etc/cron.weekly/disk_maintenance
        echo "# reduced io stress with weekly fstrim" >> /etc/cron.weekly/disk_maintenance
        echo "for DEVICE in \$(mount | grep ext4 | grep -v mapper | awk '{print \$1}')" >> /etc/cron.weekly/disk_maintenance
        echo "do" >> /etc/cron.weekly/disk_maintenance
        echo "    fstrim \"\${DEVICE}\"" >> /etc/cron.weekly/disk_maintenance
        echo "done" >> /etc/cron.weekly/disk_maintenance
        echo "# defragment ext4 devices" >> /etc/cron.weekly/disk_maintenance
        echo "for DEVICE in \$(mount | grep ext4 | awk '{print \$1}')" >> /etc/cron.weekly/disk_maintenance
        echo "do" >> /etc/cron.weekly/disk_maintenance
        echo "    e4defrag \"\${DEVICE}\"" >> /etc/cron.weekly/disk_maintenance
        echo "done" >> /etc/cron.weekly/disk_maintenance
        echo "# search and destroy mac/windows garbage files" >> /etc/cron.weekly/disk_maintenance
        echo "find -iname \"thumbs.db\" -exec rm -rf {} \\;" >> /etc/cron.weekly/disk_maintenance
        echo "find -iname \".ds_store\" -exec rm -rf {} \\;" >> /etc/cron.weekly/disk_maintenance
        chmod +x /etc/cron.weekly/disk_maintenance
    fi

    if ! [ -f /etc/cron.daily/system_updates ]
    then
        echo "#!/bin/sh" > /etc/cron.daily/system_updates
        echo "# update mirrors & packages daily" >> /etc/cron.daily/system_updates
        echo "netselect-apt -sn" >> /etc/cron.daily/system_updates
        echo "aptitude clean" >> /etc/cron.daily/system_updates
        echo "aptitude update" >> /etc/cron.daily/system_updates
        echo "aptitude upgrade -yq" >> /etc/cron.daily/system_updates
        echo "update-command-not-found" >> /etc/cron.daily/system_updates
        chmod +x /etc/cron.daily/system_updates
    fi

}

configure_monit() {

    if ! [ -f /etc/monit/monitrc.d/system ]
    then
        echo "check system localhost" > /etc/monit/monitrc.d/system
        echo "    if loadavg (1min) > 10 then alert" >> /etc/monit/monitrc.d/system
        echo "    if loadavg (5min) > 8 then alert" >> /etc/monit/monitrc.d/system
        echo "    if memory usage > 80% then alert" >> /etc/monit/monitrc.d/system
        echo "    if cpu usage (user) > 70% for 2 cycles then alert" >> /etc/monit/monitrc.d/system
        echo "    if cpu usage (system) > 50% for 2 cycles then alert" >> /etc/monit/monitrc.d/system
        echo "    if cpu usage (wait) > 50% for 2 cycles then alert" >> /etc/monit/monitrc.d/system
        echo "    if loadavg (1min) > 20 for 3 cycles then exec \"/sbin/reboot\"" >> /etc/monit/monitrc.d/system
        echo "    if loadavg (5min) > 15 for 5 cycles then exec \"/sbin/reboot\"" >> /etc/monit/monitrc.d/system
        echo "    if memory usage > 97% for 3 cycles then exec \"/sbin/reboot\"" >> /etc/monit/monitrc.d/system
        ln -sf /etc/monit/monitrc.d/system /etc/monit/conf.d/system
    fi

    if ! [ -f /etc/monit/monitrc.d/ssh ] && which sshd &> /dev/null
    then
        echo "check process sshd with pidfile /var/run/sshd.pid" > /etc/monit/monitrc.d/ssh
        echo "    start program = \"/etc/init.d/ssh start\"" >> /etc/monit/monitrc.d/ssh
        echo "    stop program  = \"/etc/init.d/ssh stop\"" >> /etc/monit/monitrc.d/ssh
        echo "    if cpu > 80% for 5 cycles then restart" >> /etc/monit/monitrc.d/ssh
        echo "    if totalmem > 200.00 MB for 5 cycles then restart" >> /etc/monit/monitrc.d/ssh
        echo "    if 3 restarts within 8 cycles then timeout" >> /etc/monit/monitrc.d/ssh
        ln -sf /etc/monit/monitrc.d/ssh /etc/monit/conf.d/ssh
    fi

    if ! [ -f /etc/monit/monitrc.d/web ] && [ $config_monit_web ]
    then
        echo "# create localhost-only web server" > /etc/monit/monitrc.d/web
        echo "set httpd port ${config_monit_web_port}" >> /etc/monit/monitrc.d/web
        echo "    allow 127.0.0.1" >> /etc/monit/monitrc.d/web
        ln -sf /etc/monit/monitrc.d/web /etc/monit/conf.d/web
    fi

    if ! [ -f /etc/monit/monitrc.d/samba ] && which smbd &> /dev/null
    then
        echo "check process samba match smbd" >> /etc/monit/monitrc.d/samba
        echo "    start program = \"/etc/init.d/samba start\"" >> /etc/monit/monitrc.d/samba
        echo "    stop program = \"/etc/init.d/samba stop\"" >> /etc/monit/monitrc.d/samba
        echo "    group sambashare" >> /etc/monit/monitrc.d/samba
        echo "    if cpu usage > 80% for 15 cycles then restart" >> /etc/monit/monitrc.d/samba
        echo "    if mem usage > 80% for 30 cycles then restart" >> /etc/monit/monitrc.d/samba
        ln -s  /etc/monit/monitrc.d/samba  /etc/monit/conf.d/samba
    fi

    if ! [ -f /etc/monit/monitrc.d/transmission-daemon ] && which transmission-daemon &> /dev/null
    then
        echo "check process transmission-daemon match transmission-daemon" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    start program = \"/etc/init.d/transmission-daemon start\"" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    stop program = \"/etc/init.d/transmission-daemon stop\"" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    if cpu usage > 80% for 15 cycles then restart" >> /etc/monit/monitrc.d/transmission-daemon
        echo "    if mem usage > 80% for 30 cycles then restart" >> /etc/monit/monitrc.d/transmission-daemon
        ln -s  /etc/monit/monitrc.d/transmission-daemon  /etc/monit/conf.d/transmission-daemon
    fi

    # test && reboot monit
    monit -t && service monit restart

}

firewall_rules() {

    # open rules file
    echo "*filter" > /etc/firewall.conf

    # set default policies
    echo "-P INPUT DROP" >> /etc/firewall.conf
    echo "-P OUTPUT ACCEPT" >> /etc/firewall.conf
    echo "-P FORWARD DROP" >> /etc/firewall.conf

    # allow local traffic
    echo "# Allow traffic for INPUT, OUTPUT on loopback" >> /etc/firewall.conf
    echo "-A INPUT -i lo -j ACCEPT" >> /etc/firewall.conf
    echo "-A OUTPUT -o lo -j ACCEPT" >> /etc/firewall.conf

    # enable pings
    echo "# Allow Pings" >> /etc/firewall.conf
    echo "-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT" >> /etc/firewall.conf

    ##
    # conditionally apply more rules
    ##

    # additional ports for comm server services
    if [ "$1" = "comm" ] || [ "$1" = "all" ]
    then

        # samba configuration
        echo "# samba traffic" >> /etc/firewall.conf
        echo "-A INPUT -p udp -m multiport --dports 137,138 -j ACCEPT" >> /etc/firewall.conf
        echo "-A INPUT -p tcp -m multiport --dports 139,445 -j ACCEPT" >> /etc/firewall.conf

        # transmission rules
        if which transmission-daemon &> /dev/null
        then

            echo "# tranmission peer traffic (default port 51413)" >> /etc/firewall.conf
            echo "-A INPUT -p udp -m udp --dport 51413 -j ACCEPT" >> /etc/firewall.conf

            if [ $config_bt_web_accessible ]
            then
                echo "# transmission web interface" >> /etc/firewall.conf
                echo "-A INPUT -p tcp -m tcp --dport ${config_bt_web_port} -j ACCEPT" >> /etc/firewall.conf
            fi

        fi

    fi

    # ssh /w rate-limiting
    echo "# Allow SSH with rate limiting" >> /etc/firewall.conf
    echo "-A INPUT -p tcp -m tcp --dport ${config_ssh_port} -m conntrack --ctstate NEW -m recent --set --name DEFAULT --rsource" >> /etc/firewall.conf
    echo "-N LOG_AND_DROP" >> /etc/firewall.conf
    echo "-A INPUT -p tcp -m tcp --dport ${config_ssh_port} -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 4 --name DEFAULT --rsource -j LOG_AND_DROP" >> /etc/firewall.conf
    echo "-A INPUT -p tcp -m tcp --dport ${config_ssh_port} -m state --state NEW -m recent --update --seconds 60 --hitcount 4 --name DEFAULT --rsource -j LOG_AND_DROP" >> /etc/firewall.conf
    echo "-A INPUT -p tcp -m tcp --dport ${config_ssh_port} -j ACCEPT" >> /etc/firewall.conf
    echo "-A LOG_AND_DROP -j LOG --log-prefix \"iptables deny: \" --log-level 7" >> /etc/firewall.conf
    echo "-A LOG_AND_DROP -j DROP" >> /etc/firewall.conf

    # continue to allow established connections
    echo "# Continue to allow established connections" >> /etc/firewall.conf
    echo "-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT" >> /etc/firewall.conf

    # close the configuration file
    echo "COMMIT" >> /etc/firewall.conf

    # create iptables loader
    echo "#!/bin/bash" > /etc/network/if-up.d/iptables
    echo "iptables-restore < /etc/firewall.conf" >> /etc/network/if-up.d/iptables
    chmod +x /etc/network/if-up.d/iptables

    # reloading iptables will not happen until reboot so as to not interfere with script execution

}

configure_jis_locale() {

    if [ $config_jis_support ]
    then

        # only enable once
        if [ $(grep -c "ja_JP.UTF-8" /etc/locale.gen) -eq 1 ]
        then
            sed -i "s/# ja_JP\.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/" /etc/locale.gen
        fi

        # rebuild system locale files
        locale-gen

        if [ "$1" = "gui" ] || [ "$1" = "all" ]
        then

            # grab custom fonts & refresh cache
            su $config_system_username -s /bin/bash -c "mkdir -p ~/.fonts"
            su $config_system_username -s /bin/bash -c "curl -o ~/.fonts/ForMateKonaVe.ttf https://raw.githubusercontent.com/cdelorme/system-setup/master/data/fonts/ForMateKonaVe.ttf"
            su $config_system_username -s /bin/bash -c "curl -o ~/.fonts/epkyouka.ttf https://raw.githubusercontent.com/cdelorme/system-setup/master/data/fonts/epkyouka.ttf"
            su $config_system_username -s /bin/bash -c "fc-cache -fr"
        fi
    fi

}

create_user() {

    if [ $LINUX ]
    then

        if ! id ${config_system_username} &> /dev/null
        then
            # create user
            useradd -m -s /bin/bash -p $(mkpasswd -m md5 "${config_system_password}") ${config_system_username}
        fi

        # apply groups to user
        usermod -aG sudo,adm,video,audio,bluetooth,netdev,fuse,scanner,pulse-access ${config_system_username}

    fi

}

configure_user() {


    # additional user configuration
    if which openbox &> /dev/null
    then

        # .xinitrc for startx
        su $config_system_username -s /bin/bash -c 'echo "exec openbox-session" > ~/.xinitrc'

        # configure openbox boot-time operations


    fi
    if which weechat-curses &> /dev/null
    then

        # generate dependent weechat files files
        su $config_system_username -s /bin/bash -c 'weechat-curses &> /dev/null & pid=$!
            while ! ([ -f ~/.weechat/irc.conf ] && [ -f ~/.weechat/weechat.conf ]); do :; done;
            kill -9 $pid'

        # set configuration values
        su $config_system_username -s /bin/bash -c "sed -i 's/max_buffer_lines_number.*/max_buffer_lines_number = 0/' ~/.weechat/weechat.conf"
        su $config_system_username -s /bin/bash -c "sed -i 's/freenode\.autoconnect.*/freenode\.autoconnect = on/' ~/.weechat/irc.conf"
        su $config_system_username -s /bin/bash -c "sed -i 's/freenode\.nicks.*/freenode\.nicks = \"${config_irc_username}, ${config_irc_username}_\"/' ~/.weechat/irc.conf"
        su $config_system_username -s /bin/bash -c "sed -i 's/freenode\.password.*/freenode\.password = \"${config_irc_password}\"/' ~/.weechat/irc.conf"
    fi
    # if [ "$1" = "gui" ] || [ "$1" = "all" ]
    # then
    #     echo "local sublime text for user..."
    # fi


}

dot_files_root() {

    # only linux should have dot-files as root
    if [ $LINUX ]
    then
        if [ $config_skel_dot_files ]
        then
            /tmp/install -a -s
        else
            /tmp/install -a
        fi
    fi

    # cleanup
    rm -rf /tmp/downloads /tmp/install.log

}


##
# main systems
##

automate_nix() {

    echo "linux: ${1} configuration will proceed in 3 seconds"
    echo "press ctrl+c before then to cancel"
    sleep 3

    # package dependencies
    install_linux_packages $1

    # async operations
    configure_linux_services $1 &
    create_crontabs $1 &
    configure_monit $1 &
    configure_hosts $1 &
    firewall_rules $1 &
    configure_jis_locale $1 &
    do_dot_files $1 &

}

automate_osx() {

    # still researching osx config options
    # we will need root privileges for certain commands
    # however we do not want to run the script as root
    # we could run sudo once to do an echo which would start the prompt
    # but that would only last a few minutes
    # if our install process takes a while it may not complete the required actions
    # which means they would have to answer the prompt again later

    # package dependencies
    install_osx_packages

    # async operations
    configure_osx_services &
    configure_hosts &
    do_dot_files &

}


##
# acquire system information
##

# check for osx, or assume linux
if [ $(uname) = "Darwin" ]
then
    OSX=true
else
    LINUX=true
fi

# currently only works with debian compatible distros and osx
# future iterations may add support for other distros

# begin tee'd log redirection
exec &> >(tee "$0.log")

# switch to /tmp for permission related concerns
if [ -d /tmp ]
then
    cd /tmp
fi

# prepare dl command as a backup to acquire any missing data files
if which curl &> /dev/null
then
    dlcmd="curl -L -o "
elif which wget &> /dev/null
then
    dlcmd="wget -O "
fi


##
# check args && run operations
##

case "$1" in
        -h|--help)
                echo "$0 - custom automated system configuration script"
                echo " "
                echo "usage example: $0 [option]"
                echo " "
                echo "options:"
                echo "  template                   a linux template"
                echo "  comm                       template + communications & file server"
                echo "  gui                        template + openbox gui & basic UI software"
                echo "  all                        template + comm + gui"
                echo "  osx                        run custom osx configurations (some interaction required)"
                echo " "
                echo "please open the script and modify the configuration defaults before execution."
                exit 0
                ;;
        template)
            automate_nix
            ;;
        comm)
            automate_nix comm
            ;;
        gui)
            automate_nix gui
            ;;
        all)
            automate_nix all
            ;;
        osx)
            automate_osx
            ;;
        *)
            $0 -h
            ;;
esac
