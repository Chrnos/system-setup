#!/bin/bash
set -xeuo pipefail
IFS=$'\n\t'


##
# fail if not running as root
##

[ $(id -u) -ne 0 ] && echo "must be executed with root permissions..." && exit 1


##
# define reusable functions
##

##
# @description request input and optionally apply a fallback/default value
# @param $1 variable name
# @param $2 description
# @param $3 default value
##
grab_or_fallback()
{
	export ${1}=""
	read -p "${3:-input}: " ${1}
	[ -z "$(eval echo \$$1)" ] && export ${1}="${2:-}"
	return 0
}

##
# @description request secret input (eg. passwords) and optionally apply a fallback/default value
# @param $1 variable name
# @param $2 description
# @param $3 default value
##
grab_secret_or_fallback()
{
	export ${1}=""
	read -p "${3:-input}: " -s ${1}
	echo "" # move to nextline
	[ -z "$(eval echo \$$1)" ] && export ${1}="${2:-}"
	return 0
}

##
# @description ask for yes/no response via y/n
# @param $1 variable to handle input
# @param $2 description
##
grab_yes_no()
{
	export ${1}=""
	until [[ "$(eval echo \$$1)" == *"y"* ]] || [[ "$(eval echo \$$1)" == *"n"* ]]
	do
		read -p "${2:-} (yn)? " ${1}
	done
	return 0
}


##
# gather user defined configuration
##

# user & key information
grab_or_fallback "username" "root" "enter your username"
grab_secret_or_fallback "password" "" "enter your user password"
[ ! -f "/home/$username/.ssh/id_rsa" ] && grab_yes_no "generate_ssh_key" "create an ssh key"
[ "${generate_ssh_key:-}" = "y" ] && grab_secret_or_fallback "ssh_key_password" "$password" "alternative password for ssh key (defaults to user password)"

# github configuration
grab_or_fallback "github_username" "" "enter your github username"
if [ -n "$github_username" ] && [ [ -f "/home/$username/.ssh/id_rsa" ] || [ "${generate_ssh_key:-}" = "y" ] ]
then
	grab_yes_no "github_ssh_key" "upload ssh key to github"
	[ -n "${github_ssh_key:-}" ] && grab_secret_or_fallback "github_password" "" "enter your github password"
fi

# various settings
grab_or_fallback "ssh_port" "22" "enter your preferred ssh port (22)"
grab_or_fallback "timezone" "US/Eastern" "enter your preferred timezone (eg. US/Eastern)"
grab_or_fallback "system_hostname" "$(hostname -s)" "enter a system hostname"
grab_or_fallback "system_domainname" "" "enter a system domain name"

# additional customization packages
grab_yes_no "install_dotfiles" "install dot files"

# conditional services
grab_yes_no "install_weechat" "install weechat irc client"
grab_yes_no "install_transmission" "install transmission bittorrent server"
grab_yes_no "install_processing_tools" "install graphics, audio, and video processing utilities"

# web service questions
grab_yes_no "is_webserver" "is this a web server"
if [ "$is_webserver" = "y" ]
then
	grab_yes_no "install_nginx" "do you want to install nginx web & proxy server"
	[ "$install_nginx" = "y" ] && grab_yes_no "public_nginx" "do you want to open web ports 80 & 443 publicly"
	grab_yes_no "install_mongodb" "install mongodb"
	[ "$install_mongodb" = "y" ] && grab_yes_no "public_mongodb" "make mongodb public"
	grab_yes_no "install_postgresql" "install postgres"
	[ "$install_postgresql" = "y" ] && grab_yes_no "public_postgresql" "make postgres public"
	grab_yes_no "install_mail_server" "would you like to install the msmtp mail server"
	[ "$install_mail_server" = "y" ] && grab_or_fallback "mail_server_username" "$username" "mail server username"
	[ "$install_mail_server" = "y" ] && grab_secret_or_fallback "mail_server_password" "$password" "mail server password"
fi

# development & workstation questions
grab_yes_no "is_a_workstation" "is this a local workstation"
if [ "$is_a_workstation" = "y" ]
then

	# as if we want development tools
	grab_yes_no "install_development_tools" "do you want to install development tools"
	if [ "$install_development_tools" = "y" ]
	then

		# we want processing tools
		install_processing_tools="y"

		# languages for development
		grab_yes_no "install_golang" "do you want to install golang"
		grab_yes_no "install_nodejs" "do you want to install nodejs"
		grab_yes_no "install_openjdk" "do you want to install openjdk for java development"
	fi

	# desktop questions
	grab_yes_no "install_openbox" "would you like to install the openbox desktop environment"
	if [ "$install_openbox" = "y" ]
	then

		# we want processing tools
		install_processing_tools="y"

		# flash projector
		grab_yes_no "install_flashprojector" "would you like to install a flash projector"

		# game packages
		grab_yes_no "install_gaming_software" "would you like to install gaming software like steam and playonlinux"
	fi
fi


##
# clean up uefi configuration
##

if [ -d "/boot/efi" ]
then
	mkdir -p /boot/efi/EFI/boot
	echo "FS0:\EFI\debian\grubx64.efi" > /boot/efi/startup.nsh
	cp -f /boot/efi/EFI/debian/grubx64.efi /boot/efi/EFI/boot/bootx64.efi
	[ ! -f /boot/efi/shellx64.efi ] && wget --no-check-certificate -O "/boot/efi/shellx64.efi" "https://svn.code.sf.net/p/edk2/code/trunk/edk2/ShellBinPkg/UefiShell/X64/Shell.efi"
fi


##
# btrfs optimizations
##

# @todo(casey): if they are using ext file system ask if they want to upgrade to btrfs
# if [ "$(mount | grep ext | awk '{print $3}' | grep -c '/')" -eq 0 ]
# then
# 	grab_yes_no "upgrade_to_btrfs" "do you want to upgrade from ext to btrfs"
# 	if [ "$upgrade_to_btrfs" = "y" ]
# 	then
# 		# still working on this
# 	fi
# fi

# if they have btrfs, ask if they want to optimize
if [ "$(mount -t btrfs | awk '{print $3}' | grep -c '/')" -gt 0 ]
then
	grab_yes_no "optimize_btrfs" "do you want to optimize your btrfs"

	if [ "$optimize_btrfs" = "y" ]
	then

		# create /home subvolume if it is not already a subvolume
		if [ "$(btrfs subvol list / | awk '{print $9}')" != "home" ]
		then
			mv -f /home /home.bak
			btrfs subvol create /home
			find /home.bak -mindepth 1 -maxdepth 1 -exec cp -R {} /home/ \;
			rm -rf /home.bak/
		fi

		# set optimizations to be applied to the disk
		export btrfs_optimizations="noatime,autodefrag"

		# check whether fstab already contains optimizations
		if [ $(cat /etc/fstab | grep ' / ' | grep -c "${btrfs_optimizations}") -eq 0 ]
		then

			# verify if ssd is being used
			export root_partition="$(mount | awk -v dev='/' '$3==dev {print $1}')"
			export root_disk="${root_partition:5:3}"
			if [ $(cat /sys/block/${root_disk}/queue/rotational) -eq 0 ]
			then
				btrfs_optimizations="${btrfs_optimizations},ssd"
			fi

			# add optimizations
			sed -i "s;/.*btrfs.*;/\tbtrfs\t${btrfs_optimizations}\t0\t1;" /etc/fstab

			# defragment and rebalance
			set +e
			btrfs filesystem defragment -rf / &>/dev/null
			btrfs balance start /
			set -e
		fi

		# @todo(casey): create initial snapshot for restoration and future iterative backups
	fi
fi


##
# package installation
##

# set best mirrors and upgrade existing packages
unset UCF_FORCE_CONFNEW
export UCF_FORCE_CONFOLD=true
export DEBIAN_FRONTEND=noninteractive
aptitude clean
aptitude update
if ! which netselect-apt &>/dev/null
then
	aptitude install -ryq netselect-apt
	cp -f /etc/apt/sources.list /etc/apt/sources.list.original
	mv -f /etc/apt/sources.list /etc/apt/sources.list.bak
	netselect-apt -c US -fsno /etc/apt/sources.list stable
	aptitude clean
	if ! aptitude update
	then
		mv -f /etc/apt/sources.list.bak /etc/apt/sources.list
		aptitude clean
		aptitude update
	fi
	aptitude upgrade -yq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
fi

# install all useful system utilities & initialize command-not-found
aptitude install -ryq screen tmux vim git mercurial bzr subversion command-not-found unzip monit ntp resolvconf watchdog ssh sudo parted smartmontools htop pv nload iptraf nethogs
update-command-not-found


##
# copy/install global configuration/dot files
##

# install local files or clone from git
if [ -d data/ ]
then
	cp -fR data/* /
else
	rm -rf /tmp/system-setup
	git clone https://github.com/cdelorme/system-setup /tmp/system-setup

	# temporary checkout until merged /w stable
	(cd /tmp/system-setup && git checkout -b dev origin/dev)

	cp -fR /tmp/system-setup/data/* /
fi

# install global dot-files
[ "$install_dotfiles" = "y" ] && curl -Ls https://raw.githubusercontent.com/cdelorme/dot-files/master/install | bash -s -- -q

# install some vim plugins & color schemes
mkdir -p /etc/skel/.vim/colors
if [ ! -d /tmp/vim-ctrlp ]
then
	git clone "https://github.com/kien/ctrlp.vim" /tmp/vim-ctrlp
	find /tmp/vim-ctrlp/* -maxdepth 0 -type d -exec cp -R {} /etc/skel/.vim/ \;
fi
if [ ! -d /tmp/vim-json ]
then
	git clone "https://github.com/elzr/vim-json" /tmp/vim-json
	find /tmp/vim-json/* -maxdepth 0 -type d -exec cp -R {} /etc/skel/.vim/ \;
fi
if [ ! -d /tmp/vim-go ] && [ "${install_golang:-}" = "y" ]
then
	git clone "https://github.com/fatih/vim-go" /tmp/vim-go
	find /tmp/vim-go/* -maxdepth 0 -type d -exec cp -R {} /etc/skel/.vim/ \;
fi
if [ ! -d /tmp/vim-node ] && [ "${install_nodejs:-}" = "y" ]
then
	git clone "https://github.com/moll/vim-node" /tmp/vim-node
	find /tmp/vim-node/* -maxdepth 0 -type d -exec cp -R {} /etc/skel/.vim/ \;
	if [ "$is_webserver" = "y" ]
	then
		aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" nodejs
	fi
fi
[ ! -f /etc/skel/.vim/colors/vividchalk.vim ] && curl -Lso /etc/skel/.vim/colors/vividchalk.vim "https://raw.githubusercontent.com/tpope/vim-vividchalk/master/colors/vividchalk.vim"
[ ! -f /etc/skel/.vim/colors/sunburst.vim ] && curl -Lso /etc/skel/.vim/colors/sunburst.vim "https://raw.githubusercontent.com/tangphillip/SunburstVIM/master/colors/sunburst.vim"

# download ~/.git-completion
curl -Lso /etc/skel/.git-completion "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"

# download ~/.githelpers
curl -Lso /etc/skel/.githelpers "https://raw.githubusercontent.com/garybernhardt/dotfiles/master/.githelpers"


##
# install conditional software
##

# conditionally install weechat
[ "$install_weechat" = "y" ] && aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" weechat

# conditionally install transmission
if [ "$install_transmission" = "y" ]
then
	aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" transmission-daemon
	systemctl stop transmission-daemon

	# configure transmission directory
	mkdir -p /media/transmission/{torrents,incomplete,downloads}
	chown -R debian-transmission:debian-transmission /media/transmission
	chmod -R 6775 /media/transmission
fi

# conditionally install video, audio, and graphics processing utilities
if [ "$install_processing_tools" = "y" ]
then
	aptitude install -yq graphicsmagick imagemagick libgd-tools libav-tools lame libvorbis-dev libogg-dev libexif-dev libfaac-dev libx264-dev vorbis-tools libavcodec-dev libavfilter-dev libavdevice-dev libavutil-dev libav-tools id3
	curl https://yt-dl.org/downloads/2015.07.18/youtube-dl -o /usr/local/bin/youtube-dl
	chmod a+rx /usr/local/bin/youtube-dl
fi

# conditionally setup web server folder permissions
if [ "$is_webserver" = "y" ]
then

	# add new groups, and to user
	groupadd -f www-data
	groupadd -f gitdev

	# create environment folders & set permissions /w sticky bits
	mkdir -p /srv/{www,git}
	chown -R www-data:www-data /srv
	chown -R www-data:gitdev /srv/git
	chmod -R 6775 /srv
fi

# conditionally install nginx
if [ "${install_nginx:-}" = "y" ]
then

	# install nginx
	aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" nginx-full

	# configure nginx folder layout
	rm -f /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
	mkdir -p /etc/nginx/ssl
fi

# conditionally install mongodb
[ "${install_mongodb:-}" = "y" ] && aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" mongodb

# conditionally install postgresql
[ "${install_postgresql:-}" = "y" ] && aptitude install -ryq  -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" postgresql

# install msmtp mail server
if [ "${install_mail_server:-}" = "y" ]
then
	# install msmtp-mta and all related/useful components
	aptitude install -ryq msmtp-mta

	# ensure permissions on the msmtprc file are strict (will contain password in plain-text)
	chmod 0600 /etc/msmtprc

	# set email & password & username (assumes gmail)
	sed -i "s/from username@gmail.com/from ${mail_server_username}@gmail.com/" /etc/msmtprc
	sed -i "s/user username/user $mail_server_username/" /etc/msmtprc
	sed -i "s/password password/password $mail_server_password/" /etc/msmtprc
fi

# development & workstation packages
if [ "$is_a_workstation" = "y" ]
then

	# enable multiarch
	dpkg --add-architecture i386

	# install workstation packages
	aptitude install -ryq firmware-linux firmware-linux-free firmware-linux-nonfree uuid-runtime fuse exfat-fuse exfat-utils sshfs parted lzop p7zip-full p7zip-rar zip unzip unrar unace rzip unalz zoo arj anacron miscfiles markdown checkinstall lm-sensors hddtemp cpufrequtils bluez

	# check ethernet devices
	if [ $(ifconfig | grep -c "eth1 ") -eq 0 ]
	then
		sed -i "s/eth1/eth0/" /etc/skel/.conkyrc
	fi

	# check graphics card and adjust compton configuration
	if [ $(lspci | grep -i "vga" | grep -ic " intel") -eq 1 ] || [ $(lspci | grep -i "vga" | grep -ic " nvidia") -eq 1 ]
	then
		sed -i 's/#vsync = "opengl-swc";/vsync = "opengl-swc";/' /etc/skel/.compton.conf
		sed -i 's/#glx-no-rebind-pixmap = true;/glx-no-rebind-pixmap = true;/' /etc/skel/.compton.conf
	fi

	# conditionally install development tools
	if [ "${install_development_tools:-}" = "y" ]
	then
		aptitude install -ryq build-essential dkms cmake bison pkg-config devscripts python-dev python3-dev python-pip python3-pip bpython bpython3 libncurses-dev libmcrypt-dev libperl-dev libconfig-dev libpcre3-dev libsdl2-dev libglfw3-dev libsfml-dev

		# conditionally install global gvm
		if [ "${install_golang:-}" = "y" ]
		then
			[ ! -d /etc/skel/.gvm ] && git clone https://github.com/moovweb/gvm /etc/skel/.gvm

			# create gvm script manually
			echo 'export GVM_ROOT="$HOME/.gvm"' > /etc/skel/.gvm/scripts/gvm
			echo '. $GVM_ROOT/scripts/gvm-default' >> /etc/skel/.gvm/scripts/gvm
			chmod +x /etc/skel/.gvm/scripts/gvm

			# add lines to load gvm in .bash_profile
			echo 'export GVM_DIR=~/.gvm' >> /etc/skel/.bash_profile
			echo '[ -s "${GVM_DIR}/scripts/gvm" ] && . "$GVM_DIR/scripts/gvm"' >> /etc/skel/.bash_profile
		fi

		# conditionally install global nvm
		if [ "${install_nodejs:-}" = "y" ]
		then
			[ ! -d /etc/skel/.nvm ] && curl -Ls https://raw.githubusercontent.com/creationix/nvm/v0.25.0/install.sh | NVM_DIR=/etc/skel/.nvm bash

			# add lines to load nvm in .bash_profile
			echo 'export NVM_DIR=~/.nvm' >> /etc/skel/.bash_profile
			echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"' >> /etc/skel/.bash_profile
		fi

		# conditionally install global openjdk
		if [ "${install_openjdk:-}" = "y" ]
		then
			aptitude install -ryq openjdk-7-jdk openjdk-7-jre
		fi
	fi

	# conditionally install openbox desktop environment
	if [ "${install_openbox:-}" = "y" ]
	then
		aptitude clean
		aptitude update
		aptitude install -ryq openbox obconf obmenu menu dmz-cursor-theme gnome-icon-theme gnome-icon-theme-extras lxappearance alsa-base alsa-utils alsa-tools pulseaudio volumeicon-alsa xorg xserver-xorg-video-all x11-xserver-utils x11-utils xinit xinput suckless-tools compton desktop-base tint2 conky-all zenity pcmanfm consolekit xarchiver tumbler ffmpegthumbnailer feh hsetroot rxvt-unicode gmrun arandr clipit xsel gksu catfish fbxkb xtightvncviewer gparted vlc mplayer gtk-recordmydesktop openshot flashplugin-nonfree gimp gimp-plugin-registry evince viewnior fonts-droid fonts-freefont-ttf fonts-liberation fonts-takao ttf-mscorefonts-installer ibus-mozc

		# install tabbedex for urxvt
		[ ! -f /usr/lib/urxvt/perl/tabbedex ] && curl -Lso /usr/lib/urxvt/perl/tabbedex "https://raw.githubusercontent.com/shaggytwodope/tabbedex-urxvt/master/tabbedex"

		# conditionally install flash projector
		if [ "$install_flashprojector" = "y" ]
		then
			aptitude install -ryq libgtk-3-0:i386 libgtk2.0-0:i386 libasound2-plugins:i386 libxt-dev:i386 libnss3 libnss3:i386
			curl -Lso /tmp/flash.tar.gz http://fpdownload.macromedia.com/pub/flashplayer/updaters/11/flashplayer_11_sa.i386.tar.gz
			tar xf /tmp/flash.tar.gz -C /tmp
			rm /tmp/flash.tar.gz
			mv /tmp/flashplayer /usr/local/bin/flashplayer
		fi

		# google chrome installation
		wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
		echo "# Google Chrome repo http://www.google.com/linuxrepositories/" > /etc/apt/sources.list.d/google.list
		echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
		echo "deb http://dl.google.com/linux/talkplugin/deb/ stable main" >> /etc/apt/sources.list.d/google.list
		echo "deb http://dl.google.com/linux/earth/deb/ stable main" >> /etc/apt/sources.list.d/google.list
		echo "deb http://dl.google.com/linux/musicmanager/deb/ stable main" >> /etc/apt/sources.list.d/google.list
		aptitude clean
		aptitude update
		aptitude install -ryq chromium google-chrome-stable google-talkplugin
		rm -f /etc/apt/sources.list.d/google.list /etc/apt/sources.list.d/google-chrome-unstable.list

		# sublime text 3 installation
		if ! which subl &>/dev/null
		then
			curl -Lso /tmp/sublime.tar.bz2 "http://c758482.r82.cf2.rackcdn.com/sublime_text_3_build_3083_x64.tar.bz2"
			tar xf /tmp/sublime.tar.bz2 -C /tmp
			rm /tmp/sublime.tar.bz2
			cp -R /tmp/sublime_text_3 /usr/local/sublime-text
			ln -nsf /usr/local/sublime-text/sublime_text /usr/local/bin/subl
			mkdir -p /etc/skel/.config/sublime-text-3/Installed Packages/
			curl -Lso /etc/skel/.config/sublime-text-3/Installed Packages/Package Control.sublime-package "https://sublime.wbond.net/Package%20Control.sublime-package"
		fi

		# check for and install nvidia drivers
		if [ $(lspci | grep -i " vga" | grep -ci " nvidia") -ge 1 ] && ! which nvidia-installer &>/dev/null
		then
			aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" linux-headers-amd64 dkms
			curl -Lso "/tmp/nvidia.run" "http://us.download.nvidia.com/XFree86/Linux-x86_64/352.21/NVIDIA-Linux-x86_64-352.21.run"
			/bin/bash /tmp/nvidia.run -a -q -s -n --install-compat32-libs --compat32-libdir=/lib/i386-linux-gnu --dkms -X -Z
		fi

		# conditionally install gaming software
		if [ "$install_gaming_software" = "y" ]
		then
			aptitude install -ryq xboxdrv playonlinux mednafen

			# enable xbox drv
			echo "blacklist xpad" > /etc/modprobe.d/blacklist-xpad.conf
			systemctl enable xboxdrv.service
			systemctl start xboxdrv.service

			# build & install ppsspp
			git clone https://github.com/hrydgard/ppsspp.git /tmp/ppsspp
			pushd /tmp/ppsspp
			git checkout v1.0.1
			git submodule update --init
			./b.sh
			mkdir /usr/local/ppsspp
			cp -R build/assets /usr/local/ppsspp/
			cp -R build/PPSSPPSDL /usr/local/ppsspp/
			ln -s /usr/local/ppsspp/PPSSPPSDL /usr/local/bin/psp
			popd

			# install steam dependencies, then download & install steam directly
			aptitude install -ryq xterm
			[ ! -f /tmp/steam.deb ] && curl -Lo /tmp/steam.deb https://steamcdn-a.akamaihd.net/client/installer/steam.deb
			[ $(dpkg -l | grep -c steam) -eq 0 ] && dpkg -i /tmp/steam.deb
			aptitude install -f
		fi
	fi
fi


##
# detect virtualbox & install guest additions
##
set +e
if [ $(lspci | grep -ci 'virtualbox') -gt 0 ] && [ ! -x /etc/init.d/vboxadd ]
then
	aptitude install -Ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" virtualbox-guest-additions-iso
	if [ -f /usr/share/virtualbox/VBoxGuestAdditions.iso ]
	then

		# install dependencies
		aptitude install -ryq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" build-essential module-assistant linux-headers-amd64

		# run the installation & setup
		mkdir -p /tmp/vbox
		[ $(mount | grep -c '/tmp/vbox') -gt 0 ] || mount -o loop /usr/share/virtualbox/VBoxGuestAdditions.iso /tmp/vbox
		if [ -x /tmp/vbox/VBoxLinuxAdditions.run ]
		then
			/tmp/vbox/VBoxLinuxAdditions.run
			/etc/init.d/vboxadd setup
			[ -x /etc/init.d/vboxadd-x11 ] && /etc/init.d/vboxadd-x11 start
		fi
	fi
fi
set -e


##
# "fix" udev so it doesn't break network device identification for changing hardware
##

if [ ! -d /etc/udev/rules.d/70-persistent-net.rules ]
then
	rm -f /etc/udev/rules.d/70-persistent-net.rules
	mkdir -p /etc/udev/rules.d/70-persistent-net.rules
fi


##
# configure sensors
##
set +e
which sensors-detect &>/dev/null && (yes "" | sensors-detect)
set -e


##
# enable watchdog if supported
##

if [ -f /dev/watchdog ]
then
	systemctl enable watchdog
	systemctl start watchdog
fi


##
# secure ssh & restart service
##

sed -i "s/Port\s*[0-9].*/Port ${ssh_port:-22}/" /etc/ssh/sshd_config
sed -i "s/^#\?PermitRootLogin.*[yn].*/PermitRootLogin no/" /etc/ssh/sshd_config
sed -i "s/^#\?PasswordAuthentication\s*[yn].*/PasswordAuthentication no/" /etc/ssh/sshd_config
[ $(grep -c 'GSSAPIAuthentication no' /etc/ssh/sshd_config) -eq 0 ] && echo "GSSAPIAuthentication no" >> /etc/ssh/sshd_config
[ $(grep -c 'UseDNS no' /etc/ssh/sshd_config) -eq 0 ] && echo "UseDNS no" >> /etc/ssh/sshd_config


##
# optimize lvm
##

[ -f /etc/lvm/lvm.conf ] && sed -i 's/issue_discards = 0/issue_discards = 1/' /etc/lvm/lvm.conf


##
# disable capslock forever in favor of ctrl
##

if [ $(grep "XKBOPTIONS" /etc/default/keyboard | grep -c "ctrl:nocaps") -eq 0 ]
then
	sed -i 's/XKBOPTIONS.*/XKBOPTIONS="ctrl:nocaps"/' /etc/default/keyboard
	dpkg-reconfigure -phigh console-setup
fi


##
# add pam tally locking
##

[ $(grep -c "pam_tally2" /etc/pam.d/common-auth) -eq 0 ] && echo "auth required pam_tally2.so deny=4 even_deny_root onerr=fail unlock_time=600 root_unlock_time=60" >> /etc/pam.d/common-auth
[ $(grep -c "pam_tally2" /etc/pam.d/common-account) -eq 0 ] && echo "account required pam_tally2.so" >> /etc/pam.d/common-account


##
# fix default permissions (secure by group)
##

sed -i 's/UMASK\s*022/UMASK\t\t002/' /etc/login.defs
if [ $(grep -c "umask=002" /etc/pam.d/common-session) -eq 0 ]
then
	echo "session optional pam_umask.so umask=002" >> /etc/pam.d/common-session
fi


##
# add handler for kernel panics to grub & nomodeset for nvidia
##

if [ $(grep -c "panic = 10" /etc/sysctl.conf) -lt 1 ]
then
	echo "kernel.panic = 10" >> /etc/sysctl.conf
fi
if [ $(grep -c "panic=10" /etc/default/grub) -lt 1 ]
then
	if [ $(lspci | grep -i "vga" | grep -ic " nvidia") -eq 1 ]
	then
		sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT="quiet nomodeset panic=10"/' /etc/default/grub
	else
		sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT="quiet panic=10"/' /etc/default/grub
	fi
	update-grub
fi


##
# conditionally set system timezone
##

if [ -f "/usr/share/zoneinfo/${timezone}" ]
then
	echo "$timezone" > /etc/timezone
	ln -nsf "/usr/share/zoneinfo/${timezone}" /etc/localtime
fi


##
# conditionally update hostname & domain name
##

if [ -n "$system_hostname" ]
then
	echo "$system_hostname" > /etc/hostname
	hostname -F /etc/hostname
	if [ -n "$system_domainname" ]
	then
		sed -i "s/127.0.1.1.*/127.0.1.1 ${system_hostname}.${system_domainname} ${system_hostname}/" /etc/hosts
	fi
fi


##
# enable custom fonts
##

[ $(grep "# ja_JP.UTF-8" -F /etc/locale.gen) -eq 0 ] || sed -i "s/# ja_JP\.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/" /etc/locale.gen
locale-gen
fc-cache -fr


##
# update alternative default softwares
##

update-alternatives --set editor /usr/bin/vim.basic
if which google-chrome-stable &> /dev/null
then
	update-alternatives --set x-www-browser /usr/bin/google-chrome-stable
fi
if which openbox-session &> /dev/null
then
	update-alternatives --set x-session-manager /usr/bin/openbox-session
fi
if which openbox &> /dev/null
then
	update-alternatives --set x-window-manager /usr/bin/openbox
fi
if which urxvt &> /dev/null
then
	update-alternatives --set x-terminal-emulator /usr/bin/urxvt
fi


##
# activate monit services via symlinks
##

[ "$install_transmission" = "y" ] && ln -nsf "../monitrc.d/transmission-daemon" "/etc/monit/conf.d/transmission-daemon"
[ "${install_nginx:-}" = "y" ] && ln -nsf "../monitrc.d/nginx" "/etc/monit/conf.d/nginx"
[ "${install_mongodb:-}" = "y" ] && ln -nsf "../monitrc.d/mongodb" "/etc/monit/conf.d/mongodb"
# @todo(casey): add postgres monit file
#[ "${install_postgres:-}" = "y" ] && ln -nsf "../monitrc.d/postgres" "/etc/monit/conf.d/postgres"


##
# configure iptables
##

[ "$ssh_port" != "22" ] && sed -i "s/ 22 / $ssh_port /" /etc/iptables/iptables.rules
[ "$install_transmission" = "y" ] && sed -i "s/#-A INPUT -p udp -m udp --dport 51413 -j ACCEPT/-A INPUT -p udp -m udp --dport 51413 -j ACCEPT/" /etc/iptables/iptables.rules && sed -i "s/#-A INPUT -s 127.0.0.1 -p tcp -m tcp --dport 9091 -j ACCEPT/-A INPUT -s 127.0.0.1 -p tcp -m tcp --dport 9091 -j ACCEPT/" /etc/iptables/iptables.rules
[ "${public_nginx:-}" = "y" ] && sed -i 's/#-A INPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -j ACCEPT/-A INPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -j ACCEPT/' /etc/iptables/iptables.rules
[ "${public_mongodb:-}" = "y" ] && sed -i "s/#-A INPUT -p tcp -m multiport --dports 27017:27019 -m conntrack --ctstate NEW -j ACCEPT/-A INPUT -p tcp -m multiport --dports 27017:27019 -m conntrack --ctstate NEW -j ACCEPT/" /etc/iptables/iptables.rules
[ "${public_postgresql:-}" = "y" ] && sed -i "s/#-A INPUT -p tcp -m tcp --dport 5432 -m conntrack --ctstate NEW -j ACCEPT/-A INPUT -p tcp -m tcp --dport 5432 -m conntrack --ctstate NEW -j ACCEPT/" /etc/iptables/iptables.rules


##
# configure audio
##

if which alsactl &>/dev/null
then
	alsactl store
fi
if [ -d /etc/pulse ]
then
	[ -f /etc/pulse/daemon.conf ] && echo "default-fragments = 128" >> /etc/pulse/daemon.conf
	[ ! -e /etc/skel/.pulse ] && cp -R /etc/pulse /etc/skel/.pulse
fi


##
# install dot-files for root
##

find /etc/skel -mindepth 1 -maxdepth 1 -exec cp -R {} /root/ \;


##
# configure user
##

# create the user & add to basic groups
id $username &> /dev/null || useradd -m -s /bin/bash -p $(mkpasswd -m md5 "$password") $username
usermod -aG sudo,adm,netdev,plugdev $username
[ "$is_a_workstation" = "y" ] && usermod -aG bluetooth,input,audio,video $username
[ "${install_nginx:-}" = "y" ] && usermod -aG www-data,gitdev $username
[ "$install_transmission" = "y" ] && usermod -aG debian-transmission $username

# generate ssh key
if [ "$username" != "root" ] && [ "${generate_ssh_key:-}" = "y" ] && [ ! -f /home/$username/.ssh/id_rsa ]
then
    ssh-keygen -q -b 4096 -t rsa -N "$ssh_key_password" -f "/home/$username/.ssh/id_rsa"
    [ -d /home/$username/.ssh ] && chmod 600 /home/$username/.ssh/*

	# attempt to upload new ssh key to github account
	if [ -f "/home/$username/.ssh/id_rsa.pub" ] && [ "${github_ssh_key:-}" = "y" ]
	then
	    curl -Li -u "${github_username}:${github_password}" -H "Content-Type: application/json" -H "Accept: application/json" -X POST -d "{\"title\":\"$(hostname -s) ($(date '+%Y/%m/%d'))\",\"key\":\"$(cat /home/${username}/.ssh/id_rsa.pub)\"}" https://api.github.com/user/keys
	fi
fi

# use github username to acquire name & email from github
if [ -n "$github_username" ]
then
    tmpdata=$(curl -Ls "https://api.github.com/users/${github_username}")
    github_name=$(echo "$tmpdata" | grep name | cut -d ':' -f2 | tr -d '",' | sed "s/^ *//")
    github_email=$(echo "$tmpdata" | grep email | cut -d ':' -f2 | tr -d '":,' | sed "s/^ *//")
    su $username -c "cd && git config --global user.name $github_username"
    su $username -c "cd && git config --global user.email $github_email"
fi

# prepare crontab for non-root user
if [ "$username" != "root" ]
then
	export cronfile="/var/spool/cron/crontabs/${username}"
	[ -f "$cronfile" ] || touch "$cronfile"
	chown $username:crontab $cronfile
	chmod 600 $cronfile

	# update ssh keys using github account
	if [ -n "$github_username" ]
	then
		[ $(grep -c "update-keys" "$cronfile") -eq 1 ] || echo "@hourly /usr/local/bin/update-keys $github_username" >> /var/spool/cron/crontabs/$username
		su $username -c "which update-keys &>/dev/null && update-keys $github_username"
	fi

	# setup load-torrents logic for every 5 minutes
	[ "$install_transmission" = "y" ] && echo "*/5 * * * * /usr/local/bin/load-torrents" >> /var/spool/cron/crontabs/$username
fi

# ensure ownership for users folder
[ -d /home/$username/.ssh ] && chown -R $username:$username /home/$username/.ssh/

# launch terminal as root and as user to initialize nvm & gvm
set +e
if [ "${install_golang:-}" = "y" ]
then
	(export GVM_ROOT=$HOME/.gvm && . ~/.gvm/scripts/gvm && gvm install go1.4.2 && gvm use go1.4.2 --default)
	[ "$username" != "root" ] && su $username -c '(cd && export GVM_ROOT=$HOME/.gvm && . .gvm/scripts/gvm && gvm install go1.4.2 && gvm use go1.4.2 --default)'
fi
if [ "${install_nodejs:-}" = "y" ]
then
	(export NVM_DIR=$HOME/.nvm && . ~/.nvm/nvm.sh && nvm install stable && nvm alias default stable)
	[ "$username" != "root" ] && su $username -c '(cd && export NVM_DIR=$HOME/.nvm && . .nvm/nvm.sh && nvm install stable && nvm alias default stable)'
fi
set -e


##
# restart services whose configuration has been modified
##

monit -t && systemctl restart monit
systemctl restart ssh
[ "$install_transmission" = "y" ] && systemctl restart transmission-daemon
[ "${install_nginx:-}" = "y" ] && nginx -t && systemctl restart nginx


##
# load iptables (could disconnect a remote session!)
##

/etc/network/if-up.d/iptables


# finish with a positive exit code
exit 0
